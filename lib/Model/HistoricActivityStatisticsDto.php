<?php
/**
 * HistoricActivityStatisticsDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HistoricActivityStatisticsDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class HistoricActivityStatisticsDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoricActivityStatisticsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'instances' => 'int',
        'canceled' => 'int',
        'finished' => 'int',
        'complete_scope' => 'int',
        'open_incidents' => 'int',
        'resolved_incidents' => 'int',
        'deleted_incidents' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'instances' => 'int64',
        'canceled' => 'int64',
        'finished' => 'int64',
        'complete_scope' => 'int64',
        'open_incidents' => 'int64',
        'resolved_incidents' => 'int64',
        'deleted_incidents' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'instances' => 'instances',
        'canceled' => 'canceled',
        'finished' => 'finished',
        'complete_scope' => 'completeScope',
        'open_incidents' => 'openIncidents',
        'resolved_incidents' => 'resolvedIncidents',
        'deleted_incidents' => 'deletedIncidents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'instances' => 'setInstances',
        'canceled' => 'setCanceled',
        'finished' => 'setFinished',
        'complete_scope' => 'setCompleteScope',
        'open_incidents' => 'setOpenIncidents',
        'resolved_incidents' => 'setResolvedIncidents',
        'deleted_incidents' => 'setDeletedIncidents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'instances' => 'getInstances',
        'canceled' => 'getCanceled',
        'finished' => 'getFinished',
        'complete_scope' => 'getCompleteScope',
        'open_incidents' => 'getOpenIncidents',
        'resolved_incidents' => 'getResolvedIncidents',
        'deleted_incidents' => 'getDeletedIncidents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['instances'] = $data['instances'] ?? null;
        $this->container['canceled'] = $data['canceled'] ?? null;
        $this->container['finished'] = $data['finished'] ?? null;
        $this->container['complete_scope'] = $data['complete_scope'] ?? null;
        $this->container['open_incidents'] = $data['open_incidents'] ?? null;
        $this->container['resolved_incidents'] = $data['resolved_incidents'] ?? null;
        $this->container['deleted_incidents'] = $data['deleted_incidents'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The id of the activity the results are aggregated for.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instances
     *
     * @return int|null
     */
    public function getInstances()
    {
        return $this->container['instances'];
    }

    /**
     * Sets instances
     *
     * @param int|null $instances The total number of all running instances of the activity.
     *
     * @return self
     */
    public function setInstances($instances)
    {
        $this->container['instances'] = $instances;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return int|null
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param int|null $canceled The total number of all canceled instances of the activity. **Note:** Will be `0` (not `null`), if canceled activity instances were excluded.
     *
     * @return self
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return int|null
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param int|null $finished The total number of all finished instances of the activity. **Note:** Will be `0` (not `null`), if finished activity instances were excluded.
     *
     * @return self
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets complete_scope
     *
     * @return int|null
     */
    public function getCompleteScope()
    {
        return $this->container['complete_scope'];
    }

    /**
     * Sets complete_scope
     *
     * @param int|null $complete_scope The total number of all instances which completed a scope of the activity. **Note:** Will be `0` (not `null`), if activity instances which completed a scope were excluded.
     *
     * @return self
     */
    public function setCompleteScope($complete_scope)
    {
        $this->container['complete_scope'] = $complete_scope;

        return $this;
    }

    /**
     * Gets open_incidents
     *
     * @return int|null
     */
    public function getOpenIncidents()
    {
        return $this->container['open_incidents'];
    }

    /**
     * Sets open_incidents
     *
     * @param int|null $open_incidents The total number of open incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.
     *
     * @return self
     */
    public function setOpenIncidents($open_incidents)
    {
        $this->container['open_incidents'] = $open_incidents;

        return $this;
    }

    /**
     * Gets resolved_incidents
     *
     * @return int|null
     */
    public function getResolvedIncidents()
    {
        return $this->container['resolved_incidents'];
    }

    /**
     * Sets resolved_incidents
     *
     * @param int|null $resolved_incidents The total number of resolved incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.
     *
     * @return self
     */
    public function setResolvedIncidents($resolved_incidents)
    {
        $this->container['resolved_incidents'] = $resolved_incidents;

        return $this;
    }

    /**
     * Gets deleted_incidents
     *
     * @return int|null
     */
    public function getDeletedIncidents()
    {
        return $this->container['deleted_incidents'];
    }

    /**
     * Sets deleted_incidents
     *
     * @param int|null $deleted_incidents The total number of deleted incidents for the activity. **Note:** Will be `0` (not `null`), if `incidents` is set to `false`.
     *
     * @return self
     */
    public function setDeletedIncidents($deleted_incidents)
    {
        $this->container['deleted_incidents'] = $deleted_incidents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


