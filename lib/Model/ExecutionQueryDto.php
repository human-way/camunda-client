<?php
/**
 * ExecutionQueryDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.15.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExecutionQueryDto Class Doc Comment
 *
 * @category Class
 * @description A Execution instance query which defines a list of Execution instances
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ExecutionQueryDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExecutionQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_key' => 'string',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_instance_id' => 'string',
        'activity_id' => 'string',
        'signal_event_subscription_name' => 'string',
        'message_event_subscription_name' => 'string',
        'active' => 'bool',
        'suspended' => 'bool',
        'incident_id' => 'string',
        'incident_type' => 'string',
        'incident_message' => 'string',
        'incident_message_like' => 'string',
        'tenant_id_in' => 'string[]',
        'variables' => '\OpenAPI\Client\Model\VariableQueryParameterDto[]',
        'process_variables' => '\OpenAPI\Client\Model\VariableQueryParameterDto[]',
        'variable_names_ignore_case' => 'bool',
        'variable_values_ignore_case' => 'bool',
        'sorting' => '\OpenAPI\Client\Model\ExecutionQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_key' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_instance_id' => null,
        'activity_id' => null,
        'signal_event_subscription_name' => null,
        'message_event_subscription_name' => null,
        'active' => null,
        'suspended' => null,
        'incident_id' => null,
        'incident_type' => null,
        'incident_message' => null,
        'incident_message_like' => null,
        'tenant_id_in' => null,
        'variables' => null,
        'process_variables' => null,
        'variable_names_ignore_case' => null,
        'variable_values_ignore_case' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_key' => 'businessKey',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_instance_id' => 'processInstanceId',
        'activity_id' => 'activityId',
        'signal_event_subscription_name' => 'signalEventSubscriptionName',
        'message_event_subscription_name' => 'messageEventSubscriptionName',
        'active' => 'active',
        'suspended' => 'suspended',
        'incident_id' => 'incidentId',
        'incident_type' => 'incidentType',
        'incident_message' => 'incidentMessage',
        'incident_message_like' => 'incidentMessageLike',
        'tenant_id_in' => 'tenantIdIn',
        'variables' => 'variables',
        'process_variables' => 'processVariables',
        'variable_names_ignore_case' => 'variableNamesIgnoreCase',
        'variable_values_ignore_case' => 'variableValuesIgnoreCase',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_key' => 'setBusinessKey',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_instance_id' => 'setProcessInstanceId',
        'activity_id' => 'setActivityId',
        'signal_event_subscription_name' => 'setSignalEventSubscriptionName',
        'message_event_subscription_name' => 'setMessageEventSubscriptionName',
        'active' => 'setActive',
        'suspended' => 'setSuspended',
        'incident_id' => 'setIncidentId',
        'incident_type' => 'setIncidentType',
        'incident_message' => 'setIncidentMessage',
        'incident_message_like' => 'setIncidentMessageLike',
        'tenant_id_in' => 'setTenantIdIn',
        'variables' => 'setVariables',
        'process_variables' => 'setProcessVariables',
        'variable_names_ignore_case' => 'setVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'setVariableValuesIgnoreCase',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_key' => 'getBusinessKey',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_instance_id' => 'getProcessInstanceId',
        'activity_id' => 'getActivityId',
        'signal_event_subscription_name' => 'getSignalEventSubscriptionName',
        'message_event_subscription_name' => 'getMessageEventSubscriptionName',
        'active' => 'getActive',
        'suspended' => 'getSuspended',
        'incident_id' => 'getIncidentId',
        'incident_type' => 'getIncidentType',
        'incident_message' => 'getIncidentMessage',
        'incident_message_like' => 'getIncidentMessageLike',
        'tenant_id_in' => 'getTenantIdIn',
        'variables' => 'getVariables',
        'process_variables' => 'getProcessVariables',
        'variable_names_ignore_case' => 'getVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'getVariableValuesIgnoreCase',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_key'] = $data['business_key'] ?? null;
        $this->container['process_definition_id'] = $data['process_definition_id'] ?? null;
        $this->container['process_definition_key'] = $data['process_definition_key'] ?? null;
        $this->container['process_instance_id'] = $data['process_instance_id'] ?? null;
        $this->container['activity_id'] = $data['activity_id'] ?? null;
        $this->container['signal_event_subscription_name'] = $data['signal_event_subscription_name'] ?? null;
        $this->container['message_event_subscription_name'] = $data['message_event_subscription_name'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['suspended'] = $data['suspended'] ?? null;
        $this->container['incident_id'] = $data['incident_id'] ?? null;
        $this->container['incident_type'] = $data['incident_type'] ?? null;
        $this->container['incident_message'] = $data['incident_message'] ?? null;
        $this->container['incident_message_like'] = $data['incident_message_like'] ?? null;
        $this->container['tenant_id_in'] = $data['tenant_id_in'] ?? null;
        $this->container['variables'] = $data['variables'] ?? null;
        $this->container['process_variables'] = $data['process_variables'] ?? null;
        $this->container['variable_names_ignore_case'] = $data['variable_names_ignore_case'] ?? null;
        $this->container['variable_values_ignore_case'] = $data['variable_values_ignore_case'] ?? null;
        $this->container['sorting'] = $data['sorting'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_key
     *
     * @return string|null
     */
    public function getBusinessKey()
    {
        return $this->container['business_key'];
    }

    /**
     * Sets business_key
     *
     * @param string|null $business_key Filter by the business key of the process instances the executions belong to.
     *
     * @return self
     */
    public function setBusinessKey($business_key)
    {
        $this->container['business_key'] = $business_key;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string|null
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string|null $process_definition_id Filter by the process definition the executions run on.
     *
     * @return self
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string|null
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string|null $process_definition_key Filter by the key of the process definition the executions run on.
     *
     * @return self
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string|null
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string|null $process_instance_id Filter by the id of the process instance the execution belongs to.
     *
     * @return self
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string|null
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string|null $activity_id Filter by the id of the activity the execution currently executes.
     *
     * @return self
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets signal_event_subscription_name
     *
     * @return string|null
     */
    public function getSignalEventSubscriptionName()
    {
        return $this->container['signal_event_subscription_name'];
    }

    /**
     * Sets signal_event_subscription_name
     *
     * @param string|null $signal_event_subscription_name Select only those executions that expect a signal of the given name.
     *
     * @return self
     */
    public function setSignalEventSubscriptionName($signal_event_subscription_name)
    {
        $this->container['signal_event_subscription_name'] = $signal_event_subscription_name;

        return $this;
    }

    /**
     * Gets message_event_subscription_name
     *
     * @return string|null
     */
    public function getMessageEventSubscriptionName()
    {
        return $this->container['message_event_subscription_name'];
    }

    /**
     * Sets message_event_subscription_name
     *
     * @param string|null $message_event_subscription_name Select only those executions that expect a message of the given name.
     *
     * @return self
     */
    public function setMessageEventSubscriptionName($message_event_subscription_name)
    {
        $this->container['message_event_subscription_name'] = $message_event_subscription_name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Only include active executions. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool|null
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool|null $suspended Only include suspended executions. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets incident_id
     *
     * @return string|null
     */
    public function getIncidentId()
    {
        return $this->container['incident_id'];
    }

    /**
     * Sets incident_id
     *
     * @param string|null $incident_id Filter by the incident id.
     *
     * @return self
     */
    public function setIncidentId($incident_id)
    {
        $this->container['incident_id'] = $incident_id;

        return $this;
    }

    /**
     * Gets incident_type
     *
     * @return string|null
     */
    public function getIncidentType()
    {
        return $this->container['incident_type'];
    }

    /**
     * Sets incident_type
     *
     * @param string|null $incident_type Filter by the incident type. See the [User Guide](/manual/develop/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     *
     * @return self
     */
    public function setIncidentType($incident_type)
    {
        $this->container['incident_type'] = $incident_type;

        return $this;
    }

    /**
     * Gets incident_message
     *
     * @return string|null
     */
    public function getIncidentMessage()
    {
        return $this->container['incident_message'];
    }

    /**
     * Sets incident_message
     *
     * @param string|null $incident_message Filter by the incident message. Exact match.
     *
     * @return self
     */
    public function setIncidentMessage($incident_message)
    {
        $this->container['incident_message'] = $incident_message;

        return $this;
    }

    /**
     * Gets incident_message_like
     *
     * @return string|null
     */
    public function getIncidentMessageLike()
    {
        return $this->container['incident_message_like'];
    }

    /**
     * Sets incident_message_like
     *
     * @param string|null $incident_message_like Filter by the incident message that the parameter is a substring of.
     *
     * @return self
     */
    public function setIncidentMessageLike($incident_message_like)
    {
        $this->container['incident_message_like'] = $incident_message_like;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]|null
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[]|null $tenant_id_in Filter by a  list of tenant ids. An execution must have one of the given tenant ids.
     *
     * @return self
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return \OpenAPI\Client\Model\VariableQueryParameterDto[]|null
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param \OpenAPI\Client\Model\VariableQueryParameterDto[]|null $variables An array to only include executions that have variables with certain values.  The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
     *
     * @return self
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets process_variables
     *
     * @return \OpenAPI\Client\Model\VariableQueryParameterDto[]|null
     */
    public function getProcessVariables()
    {
        return $this->container['process_variables'];
    }

    /**
     * Sets process_variables
     *
     * @param \OpenAPI\Client\Model\VariableQueryParameterDto[]|null $process_variables An array to only include executions that belong to a process instance with variables with certain values.  The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to.
     *
     * @return self
     */
    public function setProcessVariables($process_variables)
    {
        $this->container['process_variables'] = $process_variables;

        return $this;
    }

    /**
     * Gets variable_names_ignore_case
     *
     * @return bool|null
     */
    public function getVariableNamesIgnoreCase()
    {
        return $this->container['variable_names_ignore_case'];
    }

    /**
     * Sets variable_names_ignore_case
     *
     * @param bool|null $variable_names_ignore_case Match all variable names provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
     *
     * @return self
     */
    public function setVariableNamesIgnoreCase($variable_names_ignore_case)
    {
        $this->container['variable_names_ignore_case'] = $variable_names_ignore_case;

        return $this;
    }

    /**
     * Gets variable_values_ignore_case
     *
     * @return bool|null
     */
    public function getVariableValuesIgnoreCase()
    {
        return $this->container['variable_values_ignore_case'];
    }

    /**
     * Sets variable_values_ignore_case
     *
     * @param bool|null $variable_values_ignore_case Match all variable values provided in `variables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
     *
     * @return self
     */
    public function setVariableValuesIgnoreCase($variable_values_ignore_case)
    {
        $this->container['variable_values_ignore_case'] = $variable_values_ignore_case;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \OpenAPI\Client\Model\ExecutionQueryDtoSorting[]|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \OpenAPI\Client\Model\ExecutionQueryDtoSorting[]|null $sorting An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Has no effect for the `/count` endpoint
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


