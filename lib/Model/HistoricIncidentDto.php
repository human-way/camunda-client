<?php
/**
 * HistoricIncidentDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HistoricIncidentDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class HistoricIncidentDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoricIncidentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_id' => 'string',
        'process_instance_id' => 'string',
        'execution_id' => 'string',
        'root_process_instance_id' => 'string',
        'create_time' => '\DateTime',
        'end_time' => '\DateTime',
        'removal_time' => '\DateTime',
        'incident_type' => 'string',
        'activity_id' => 'string',
        'failed_activity_id' => 'string',
        'cause_incident_id' => 'string',
        'root_cause_incident_id' => 'string',
        'configuration' => 'string',
        'history_configuration' => 'string',
        'incident_message' => 'string',
        'tenant_id' => 'string',
        'job_definition_id' => 'string',
        'open' => 'bool',
        'deleted' => 'bool',
        'resolved' => 'bool',
        'annotation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'process_definition_key' => null,
        'process_definition_id' => null,
        'process_instance_id' => null,
        'execution_id' => null,
        'root_process_instance_id' => null,
        'create_time' => 'date-time',
        'end_time' => 'date-time',
        'removal_time' => 'date-time',
        'incident_type' => null,
        'activity_id' => null,
        'failed_activity_id' => null,
        'cause_incident_id' => null,
        'root_cause_incident_id' => null,
        'configuration' => null,
        'history_configuration' => null,
        'incident_message' => null,
        'tenant_id' => null,
        'job_definition_id' => null,
        'open' => null,
        'deleted' => null,
        'resolved' => null,
        'annotation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_id' => 'processDefinitionId',
        'process_instance_id' => 'processInstanceId',
        'execution_id' => 'executionId',
        'root_process_instance_id' => 'rootProcessInstanceId',
        'create_time' => 'createTime',
        'end_time' => 'endTime',
        'removal_time' => 'removalTime',
        'incident_type' => 'incidentType',
        'activity_id' => 'activityId',
        'failed_activity_id' => 'failedActivityId',
        'cause_incident_id' => 'causeIncidentId',
        'root_cause_incident_id' => 'rootCauseIncidentId',
        'configuration' => 'configuration',
        'history_configuration' => 'historyConfiguration',
        'incident_message' => 'incidentMessage',
        'tenant_id' => 'tenantId',
        'job_definition_id' => 'jobDefinitionId',
        'open' => 'open',
        'deleted' => 'deleted',
        'resolved' => 'resolved',
        'annotation' => 'annotation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_instance_id' => 'setProcessInstanceId',
        'execution_id' => 'setExecutionId',
        'root_process_instance_id' => 'setRootProcessInstanceId',
        'create_time' => 'setCreateTime',
        'end_time' => 'setEndTime',
        'removal_time' => 'setRemovalTime',
        'incident_type' => 'setIncidentType',
        'activity_id' => 'setActivityId',
        'failed_activity_id' => 'setFailedActivityId',
        'cause_incident_id' => 'setCauseIncidentId',
        'root_cause_incident_id' => 'setRootCauseIncidentId',
        'configuration' => 'setConfiguration',
        'history_configuration' => 'setHistoryConfiguration',
        'incident_message' => 'setIncidentMessage',
        'tenant_id' => 'setTenantId',
        'job_definition_id' => 'setJobDefinitionId',
        'open' => 'setOpen',
        'deleted' => 'setDeleted',
        'resolved' => 'setResolved',
        'annotation' => 'setAnnotation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_instance_id' => 'getProcessInstanceId',
        'execution_id' => 'getExecutionId',
        'root_process_instance_id' => 'getRootProcessInstanceId',
        'create_time' => 'getCreateTime',
        'end_time' => 'getEndTime',
        'removal_time' => 'getRemovalTime',
        'incident_type' => 'getIncidentType',
        'activity_id' => 'getActivityId',
        'failed_activity_id' => 'getFailedActivityId',
        'cause_incident_id' => 'getCauseIncidentId',
        'root_cause_incident_id' => 'getRootCauseIncidentId',
        'configuration' => 'getConfiguration',
        'history_configuration' => 'getHistoryConfiguration',
        'incident_message' => 'getIncidentMessage',
        'tenant_id' => 'getTenantId',
        'job_definition_id' => 'getJobDefinitionId',
        'open' => 'getOpen',
        'deleted' => 'getDeleted',
        'resolved' => 'getResolved',
        'annotation' => 'getAnnotation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['process_definition_key'] = $data['process_definition_key'] ?? null;
        $this->container['process_definition_id'] = $data['process_definition_id'] ?? null;
        $this->container['process_instance_id'] = $data['process_instance_id'] ?? null;
        $this->container['execution_id'] = $data['execution_id'] ?? null;
        $this->container['root_process_instance_id'] = $data['root_process_instance_id'] ?? null;
        $this->container['create_time'] = $data['create_time'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['removal_time'] = $data['removal_time'] ?? null;
        $this->container['incident_type'] = $data['incident_type'] ?? null;
        $this->container['activity_id'] = $data['activity_id'] ?? null;
        $this->container['failed_activity_id'] = $data['failed_activity_id'] ?? null;
        $this->container['cause_incident_id'] = $data['cause_incident_id'] ?? null;
        $this->container['root_cause_incident_id'] = $data['root_cause_incident_id'] ?? null;
        $this->container['configuration'] = $data['configuration'] ?? null;
        $this->container['history_configuration'] = $data['history_configuration'] ?? null;
        $this->container['incident_message'] = $data['incident_message'] ?? null;
        $this->container['tenant_id'] = $data['tenant_id'] ?? null;
        $this->container['job_definition_id'] = $data['job_definition_id'] ?? null;
        $this->container['open'] = $data['open'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
        $this->container['resolved'] = $data['resolved'] ?? null;
        $this->container['annotation'] = $data['annotation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The id of the incident.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string|null
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string|null $process_definition_key The key of the process definition this incident is associated with.
     *
     * @return self
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string|null
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string|null $process_definition_id The id of the process definition this incident is associated with.
     *
     * @return self
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string|null
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string|null $process_instance_id The key of the process definition this incident is associated with.
     *
     * @return self
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string|null
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string|null $execution_id The id of the execution this incident is associated with.
     *
     * @return self
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets root_process_instance_id
     *
     * @return string|null
     */
    public function getRootProcessInstanceId()
    {
        return $this->container['root_process_instance_id'];
    }

    /**
     * Sets root_process_instance_id
     *
     * @param string|null $root_process_instance_id The process instance id of the root process instance that initiated the process containing this incident.
     *
     * @return self
     */
    public function setRootProcessInstanceId($root_process_instance_id)
    {
        $this->container['root_process_instance_id'] = $root_process_instance_id;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return \DateTime|null
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param \DateTime|null $create_time The time this incident happened.  [Default format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time The time this incident has been deleted or resolved.  [Default format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets removal_time
     *
     * @return \DateTime|null
     */
    public function getRemovalTime()
    {
        return $this->container['removal_time'];
    }

    /**
     * Sets removal_time
     *
     * @param \DateTime|null $removal_time The time after which the incident should be removed by the History Cleanup job. [Default format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setRemovalTime($removal_time)
    {
        $this->container['removal_time'] = $removal_time;

        return $this;
    }

    /**
     * Gets incident_type
     *
     * @return string|null
     */
    public function getIncidentType()
    {
        return $this->container['incident_type'];
    }

    /**
     * Sets incident_type
     *
     * @param string|null $incident_type The type of incident, for example: `failedJobs` will be returned in case of an incident which identified a failed job during the execution of a process instance. See the [User Guide](/manual/develop/user- guide/process-engine/incidents/#incident-types) for a list of incident types.
     *
     * @return self
     */
    public function setIncidentType($incident_type)
    {
        $this->container['incident_type'] = $incident_type;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string|null
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string|null $activity_id The id of the activity this incident is associated with.
     *
     * @return self
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets failed_activity_id
     *
     * @return string|null
     */
    public function getFailedActivityId()
    {
        return $this->container['failed_activity_id'];
    }

    /**
     * Sets failed_activity_id
     *
     * @param string|null $failed_activity_id The id of the activity on which the last exception occurred.
     *
     * @return self
     */
    public function setFailedActivityId($failed_activity_id)
    {
        $this->container['failed_activity_id'] = $failed_activity_id;

        return $this;
    }

    /**
     * Gets cause_incident_id
     *
     * @return string|null
     */
    public function getCauseIncidentId()
    {
        return $this->container['cause_incident_id'];
    }

    /**
     * Sets cause_incident_id
     *
     * @param string|null $cause_incident_id The id of the associated cause incident which has been triggered.
     *
     * @return self
     */
    public function setCauseIncidentId($cause_incident_id)
    {
        $this->container['cause_incident_id'] = $cause_incident_id;

        return $this;
    }

    /**
     * Gets root_cause_incident_id
     *
     * @return string|null
     */
    public function getRootCauseIncidentId()
    {
        return $this->container['root_cause_incident_id'];
    }

    /**
     * Sets root_cause_incident_id
     *
     * @param string|null $root_cause_incident_id The id of the associated root cause incident which has been triggered.
     *
     * @return self
     */
    public function setRootCauseIncidentId($root_cause_incident_id)
    {
        $this->container['root_cause_incident_id'] = $root_cause_incident_id;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return string|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param string|null $configuration The payload of this incident.
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets history_configuration
     *
     * @return string|null
     */
    public function getHistoryConfiguration()
    {
        return $this->container['history_configuration'];
    }

    /**
     * Sets history_configuration
     *
     * @param string|null $history_configuration The payload of this incident at the time when it occurred.
     *
     * @return self
     */
    public function setHistoryConfiguration($history_configuration)
    {
        $this->container['history_configuration'] = $history_configuration;

        return $this;
    }

    /**
     * Gets incident_message
     *
     * @return string|null
     */
    public function getIncidentMessage()
    {
        return $this->container['incident_message'];
    }

    /**
     * Sets incident_message
     *
     * @param string|null $incident_message The message of this incident.
     *
     * @return self
     */
    public function setIncidentMessage($incident_message)
    {
        $this->container['incident_message'] = $incident_message;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id The id of the tenant this incident is associated with.
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets job_definition_id
     *
     * @return string|null
     */
    public function getJobDefinitionId()
    {
        return $this->container['job_definition_id'];
    }

    /**
     * Sets job_definition_id
     *
     * @param string|null $job_definition_id The job definition id the incident is associated with.
     *
     * @return self
     */
    public function setJobDefinitionId($job_definition_id)
    {
        $this->container['job_definition_id'] = $job_definition_id;

        return $this;
    }

    /**
     * Gets open
     *
     * @return bool|null
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param bool|null $open If true, this incident is open.
     *
     * @return self
     */
    public function setOpen($open)
    {
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted If true, this incident has been deleted.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets resolved
     *
     * @return bool|null
     */
    public function getResolved()
    {
        return $this->container['resolved'];
    }

    /**
     * Sets resolved
     *
     * @param bool|null $resolved If true, this incident has been resolved.
     *
     * @return self
     */
    public function setResolved($resolved)
    {
        $this->container['resolved'] = $resolved;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return string|null
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param string|null $annotation The annotation set to the incident.
     *
     * @return self
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


