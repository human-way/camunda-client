<?php
/**
 * HistoricDetailQueryDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HistoricDetailQueryDto Class Doc Comment
 *
 * @category Class
 * @description A historic detail query which defines a group of historic details.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class HistoricDetailQueryDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoricDetailQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'process_instance_id' => 'string',
        'process_instance_id_in' => 'string[]',
        'execution_id' => 'string',
        'task_id' => 'string',
        'activity_instance_id' => 'string',
        'case_instance_id' => 'string',
        'case_execution_id' => 'string',
        'variable_instance_id' => 'string',
        'variable_type_in' => 'string[]',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'user_operation_id' => 'string',
        'form_fields' => 'bool',
        'variable_updates' => 'bool',
        'exclude_task_details' => 'bool',
        'initial' => 'bool',
        'occurred_before' => '\DateTime',
        'occurred_after' => '\DateTime',
        'sorting' => '\OpenAPI\Client\Model\HistoricDetailQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'process_instance_id' => null,
        'process_instance_id_in' => null,
        'execution_id' => null,
        'task_id' => null,
        'activity_instance_id' => null,
        'case_instance_id' => null,
        'case_execution_id' => null,
        'variable_instance_id' => null,
        'variable_type_in' => null,
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'user_operation_id' => null,
        'form_fields' => null,
        'variable_updates' => null,
        'exclude_task_details' => null,
        'initial' => null,
        'occurred_before' => 'date-time',
        'occurred_after' => 'date-time',
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'process_instance_id' => 'processInstanceId',
        'process_instance_id_in' => 'processInstanceIdIn',
        'execution_id' => 'executionId',
        'task_id' => 'taskId',
        'activity_instance_id' => 'activityInstanceId',
        'case_instance_id' => 'caseInstanceId',
        'case_execution_id' => 'caseExecutionId',
        'variable_instance_id' => 'variableInstanceId',
        'variable_type_in' => 'variableTypeIn',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'user_operation_id' => 'userOperationId',
        'form_fields' => 'formFields',
        'variable_updates' => 'variableUpdates',
        'exclude_task_details' => 'excludeTaskDetails',
        'initial' => 'initial',
        'occurred_before' => 'occurredBefore',
        'occurred_after' => 'occurredAfter',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'process_instance_id' => 'setProcessInstanceId',
        'process_instance_id_in' => 'setProcessInstanceIdIn',
        'execution_id' => 'setExecutionId',
        'task_id' => 'setTaskId',
        'activity_instance_id' => 'setActivityInstanceId',
        'case_instance_id' => 'setCaseInstanceId',
        'case_execution_id' => 'setCaseExecutionId',
        'variable_instance_id' => 'setVariableInstanceId',
        'variable_type_in' => 'setVariableTypeIn',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'user_operation_id' => 'setUserOperationId',
        'form_fields' => 'setFormFields',
        'variable_updates' => 'setVariableUpdates',
        'exclude_task_details' => 'setExcludeTaskDetails',
        'initial' => 'setInitial',
        'occurred_before' => 'setOccurredBefore',
        'occurred_after' => 'setOccurredAfter',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'process_instance_id' => 'getProcessInstanceId',
        'process_instance_id_in' => 'getProcessInstanceIdIn',
        'execution_id' => 'getExecutionId',
        'task_id' => 'getTaskId',
        'activity_instance_id' => 'getActivityInstanceId',
        'case_instance_id' => 'getCaseInstanceId',
        'case_execution_id' => 'getCaseExecutionId',
        'variable_instance_id' => 'getVariableInstanceId',
        'variable_type_in' => 'getVariableTypeIn',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'user_operation_id' => 'getUserOperationId',
        'form_fields' => 'getFormFields',
        'variable_updates' => 'getVariableUpdates',
        'exclude_task_details' => 'getExcludeTaskDetails',
        'initial' => 'getInitial',
        'occurred_before' => 'getOccurredBefore',
        'occurred_after' => 'getOccurredAfter',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['process_instance_id'] = $data['process_instance_id'] ?? null;
        $this->container['process_instance_id_in'] = $data['process_instance_id_in'] ?? null;
        $this->container['execution_id'] = $data['execution_id'] ?? null;
        $this->container['task_id'] = $data['task_id'] ?? null;
        $this->container['activity_instance_id'] = $data['activity_instance_id'] ?? null;
        $this->container['case_instance_id'] = $data['case_instance_id'] ?? null;
        $this->container['case_execution_id'] = $data['case_execution_id'] ?? null;
        $this->container['variable_instance_id'] = $data['variable_instance_id'] ?? null;
        $this->container['variable_type_in'] = $data['variable_type_in'] ?? null;
        $this->container['tenant_id_in'] = $data['tenant_id_in'] ?? null;
        $this->container['without_tenant_id'] = $data['without_tenant_id'] ?? null;
        $this->container['user_operation_id'] = $data['user_operation_id'] ?? null;
        $this->container['form_fields'] = $data['form_fields'] ?? null;
        $this->container['variable_updates'] = $data['variable_updates'] ?? null;
        $this->container['exclude_task_details'] = $data['exclude_task_details'] ?? null;
        $this->container['initial'] = $data['initial'] ?? null;
        $this->container['occurred_before'] = $data['occurred_before'] ?? null;
        $this->container['occurred_after'] = $data['occurred_after'] ?? null;
        $this->container['sorting'] = $data['sorting'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets process_instance_id
     *
     * @return string|null
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string|null $process_instance_id Filter by process instance id.
     *
     * @return self
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_id_in
     *
     * @return string[]|null
     */
    public function getProcessInstanceIdIn()
    {
        return $this->container['process_instance_id_in'];
    }

    /**
     * Sets process_instance_id_in
     *
     * @param string[]|null $process_instance_id_in Only include historic details which belong to one of the passed  process instance ids.
     *
     * @return self
     */
    public function setProcessInstanceIdIn($process_instance_id_in)
    {
        $this->container['process_instance_id_in'] = $process_instance_id_in;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string|null
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string|null $execution_id Filter by execution id.
     *
     * @return self
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string|null
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string|null $task_id Filter by task id.
     *
     * @return self
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets activity_instance_id
     *
     * @return string|null
     */
    public function getActivityInstanceId()
    {
        return $this->container['activity_instance_id'];
    }

    /**
     * Sets activity_instance_id
     *
     * @param string|null $activity_instance_id Filter by activity instance id.
     *
     * @return self
     */
    public function setActivityInstanceId($activity_instance_id)
    {
        $this->container['activity_instance_id'] = $activity_instance_id;

        return $this;
    }

    /**
     * Gets case_instance_id
     *
     * @return string|null
     */
    public function getCaseInstanceId()
    {
        return $this->container['case_instance_id'];
    }

    /**
     * Sets case_instance_id
     *
     * @param string|null $case_instance_id Filter by case instance id.
     *
     * @return self
     */
    public function setCaseInstanceId($case_instance_id)
    {
        $this->container['case_instance_id'] = $case_instance_id;

        return $this;
    }

    /**
     * Gets case_execution_id
     *
     * @return string|null
     */
    public function getCaseExecutionId()
    {
        return $this->container['case_execution_id'];
    }

    /**
     * Sets case_execution_id
     *
     * @param string|null $case_execution_id Filter by case execution id.
     *
     * @return self
     */
    public function setCaseExecutionId($case_execution_id)
    {
        $this->container['case_execution_id'] = $case_execution_id;

        return $this;
    }

    /**
     * Gets variable_instance_id
     *
     * @return string|null
     */
    public function getVariableInstanceId()
    {
        return $this->container['variable_instance_id'];
    }

    /**
     * Sets variable_instance_id
     *
     * @param string|null $variable_instance_id Filter by variable instance id.
     *
     * @return self
     */
    public function setVariableInstanceId($variable_instance_id)
    {
        $this->container['variable_instance_id'] = $variable_instance_id;

        return $this;
    }

    /**
     * Gets variable_type_in
     *
     * @return string[]|null
     */
    public function getVariableTypeIn()
    {
        return $this->container['variable_type_in'];
    }

    /**
     * Sets variable_type_in
     *
     * @param string[]|null $variable_type_in Only include historic details where the variable updates belong to one of the passed  list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type `serializable`.
     *
     * @return self
     */
    public function setVariableTypeIn($variable_type_in)
    {
        $this->container['variable_type_in'] = $variable_type_in;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]|null
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[]|null $tenant_id_in Filter by a  list of tenant ids.
     *
     * @return self
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool|null
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool|null $without_tenant_id Only include historic details that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets user_operation_id
     *
     * @return string|null
     */
    public function getUserOperationId()
    {
        return $this->container['user_operation_id'];
    }

    /**
     * Sets user_operation_id
     *
     * @param string|null $user_operation_id Filter by a user operation id.
     *
     * @return self
     */
    public function setUserOperationId($user_operation_id)
    {
        $this->container['user_operation_id'] = $user_operation_id;

        return $this;
    }

    /**
     * Gets form_fields
     *
     * @return bool|null
     */
    public function getFormFields()
    {
        return $this->container['form_fields'];
    }

    /**
     * Sets form_fields
     *
     * @param bool|null $form_fields Only include `HistoricFormFields`. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setFormFields($form_fields)
    {
        $this->container['form_fields'] = $form_fields;

        return $this;
    }

    /**
     * Gets variable_updates
     *
     * @return bool|null
     */
    public function getVariableUpdates()
    {
        return $this->container['variable_updates'];
    }

    /**
     * Sets variable_updates
     *
     * @param bool|null $variable_updates Only include `HistoricVariableUpdates`. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setVariableUpdates($variable_updates)
    {
        $this->container['variable_updates'] = $variable_updates;

        return $this;
    }

    /**
     * Gets exclude_task_details
     *
     * @return bool|null
     */
    public function getExcludeTaskDetails()
    {
        return $this->container['exclude_task_details'];
    }

    /**
     * Sets exclude_task_details
     *
     * @param bool|null $exclude_task_details Excludes all task-related `HistoricDetails`, so only items which have no task id set will be selected. When this parameter is used together with `taskId`, this call is ignored and task details are not excluded. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setExcludeTaskDetails($exclude_task_details)
    {
        $this->container['exclude_task_details'] = $exclude_task_details;

        return $this;
    }

    /**
     * Gets initial
     *
     * @return bool|null
     */
    public function getInitial()
    {
        return $this->container['initial'];
    }

    /**
     * Sets initial
     *
     * @param bool|null $initial Restrict to historic variable updates that contain only initial variable values. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setInitial($initial)
    {
        $this->container['initial'] = $initial;

        return $this;
    }

    /**
     * Gets occurred_before
     *
     * @return \DateTime|null
     */
    public function getOccurredBefore()
    {
        return $this->container['occurred_before'];
    }

    /**
     * Sets occurred_before
     *
     * @param \DateTime|null $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return self
     */
    public function setOccurredBefore($occurred_before)
    {
        $this->container['occurred_before'] = $occurred_before;

        return $this;
    }

    /**
     * Gets occurred_after
     *
     * @return \DateTime|null
     */
    public function getOccurredAfter()
    {
        return $this->container['occurred_after'];
    }

    /**
     * Sets occurred_after
     *
     * @param \DateTime|null $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return self
     */
    public function setOccurredAfter($occurred_after)
    {
        $this->container['occurred_after'] = $occurred_after;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \OpenAPI\Client\Model\HistoricDetailQueryDtoSorting[]|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \OpenAPI\Client\Model\HistoricDetailQueryDtoSorting[]|null $sorting A JSON array of criteria to sort the result by. Each element of the array is                     a JSON object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Does not have an effect for the `count` endpoint.
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


