<?php
/**
 * CleanableHistoricDecisionInstanceReportResultDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CleanableHistoricDecisionInstanceReportResultDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CleanableHistoricDecisionInstanceReportResultDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CleanableHistoricDecisionInstanceReportResultDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'decision_definition_id' => 'string',
        'decision_definition_key' => 'string',
        'decision_definition_name' => 'string',
        'decision_definition_version' => 'int',
        'history_time_to_live' => 'int',
        'finished_decision_instance_count' => 'int',
        'cleanable_decision_instance_count' => 'int',
        'tenant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'decision_definition_id' => null,
        'decision_definition_key' => null,
        'decision_definition_name' => null,
        'decision_definition_version' => 'int32',
        'history_time_to_live' => 'int32',
        'finished_decision_instance_count' => 'int64',
        'cleanable_decision_instance_count' => 'int64',
        'tenant_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'decision_definition_id' => 'decisionDefinitionId',
        'decision_definition_key' => 'decisionDefinitionKey',
        'decision_definition_name' => 'decisionDefinitionName',
        'decision_definition_version' => 'decisionDefinitionVersion',
        'history_time_to_live' => 'historyTimeToLive',
        'finished_decision_instance_count' => 'finishedDecisionInstanceCount',
        'cleanable_decision_instance_count' => 'cleanableDecisionInstanceCount',
        'tenant_id' => 'tenantId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'decision_definition_id' => 'setDecisionDefinitionId',
        'decision_definition_key' => 'setDecisionDefinitionKey',
        'decision_definition_name' => 'setDecisionDefinitionName',
        'decision_definition_version' => 'setDecisionDefinitionVersion',
        'history_time_to_live' => 'setHistoryTimeToLive',
        'finished_decision_instance_count' => 'setFinishedDecisionInstanceCount',
        'cleanable_decision_instance_count' => 'setCleanableDecisionInstanceCount',
        'tenant_id' => 'setTenantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'decision_definition_id' => 'getDecisionDefinitionId',
        'decision_definition_key' => 'getDecisionDefinitionKey',
        'decision_definition_name' => 'getDecisionDefinitionName',
        'decision_definition_version' => 'getDecisionDefinitionVersion',
        'history_time_to_live' => 'getHistoryTimeToLive',
        'finished_decision_instance_count' => 'getFinishedDecisionInstanceCount',
        'cleanable_decision_instance_count' => 'getCleanableDecisionInstanceCount',
        'tenant_id' => 'getTenantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['decision_definition_id'] = $data['decision_definition_id'] ?? null;
        $this->container['decision_definition_key'] = $data['decision_definition_key'] ?? null;
        $this->container['decision_definition_name'] = $data['decision_definition_name'] ?? null;
        $this->container['decision_definition_version'] = $data['decision_definition_version'] ?? null;
        $this->container['history_time_to_live'] = $data['history_time_to_live'] ?? null;
        $this->container['finished_decision_instance_count'] = $data['finished_decision_instance_count'] ?? null;
        $this->container['cleanable_decision_instance_count'] = $data['cleanable_decision_instance_count'] ?? null;
        $this->container['tenant_id'] = $data['tenant_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets decision_definition_id
     *
     * @return string|null
     */
    public function getDecisionDefinitionId()
    {
        return $this->container['decision_definition_id'];
    }

    /**
     * Sets decision_definition_id
     *
     * @param string|null $decision_definition_id The id of the decision definition.
     *
     * @return self
     */
    public function setDecisionDefinitionId($decision_definition_id)
    {
        $this->container['decision_definition_id'] = $decision_definition_id;

        return $this;
    }

    /**
     * Gets decision_definition_key
     *
     * @return string|null
     */
    public function getDecisionDefinitionKey()
    {
        return $this->container['decision_definition_key'];
    }

    /**
     * Sets decision_definition_key
     *
     * @param string|null $decision_definition_key The key of the decision definition.
     *
     * @return self
     */
    public function setDecisionDefinitionKey($decision_definition_key)
    {
        $this->container['decision_definition_key'] = $decision_definition_key;

        return $this;
    }

    /**
     * Gets decision_definition_name
     *
     * @return string|null
     */
    public function getDecisionDefinitionName()
    {
        return $this->container['decision_definition_name'];
    }

    /**
     * Sets decision_definition_name
     *
     * @param string|null $decision_definition_name The name of the decision definition.
     *
     * @return self
     */
    public function setDecisionDefinitionName($decision_definition_name)
    {
        $this->container['decision_definition_name'] = $decision_definition_name;

        return $this;
    }

    /**
     * Gets decision_definition_version
     *
     * @return int|null
     */
    public function getDecisionDefinitionVersion()
    {
        return $this->container['decision_definition_version'];
    }

    /**
     * Sets decision_definition_version
     *
     * @param int|null $decision_definition_version The version of the decision definition.
     *
     * @return self
     */
    public function setDecisionDefinitionVersion($decision_definition_version)
    {
        $this->container['decision_definition_version'] = $decision_definition_version;

        return $this;
    }

    /**
     * Gets history_time_to_live
     *
     * @return int|null
     */
    public function getHistoryTimeToLive()
    {
        return $this->container['history_time_to_live'];
    }

    /**
     * Sets history_time_to_live
     *
     * @param int|null $history_time_to_live The history time to live of the decision definition.
     *
     * @return self
     */
    public function setHistoryTimeToLive($history_time_to_live)
    {
        $this->container['history_time_to_live'] = $history_time_to_live;

        return $this;
    }

    /**
     * Gets finished_decision_instance_count
     *
     * @return int|null
     */
    public function getFinishedDecisionInstanceCount()
    {
        return $this->container['finished_decision_instance_count'];
    }

    /**
     * Sets finished_decision_instance_count
     *
     * @param int|null $finished_decision_instance_count The count of the finished historic decision instances.
     *
     * @return self
     */
    public function setFinishedDecisionInstanceCount($finished_decision_instance_count)
    {
        $this->container['finished_decision_instance_count'] = $finished_decision_instance_count;

        return $this;
    }

    /**
     * Gets cleanable_decision_instance_count
     *
     * @return int|null
     */
    public function getCleanableDecisionInstanceCount()
    {
        return $this->container['cleanable_decision_instance_count'];
    }

    /**
     * Sets cleanable_decision_instance_count
     *
     * @param int|null $cleanable_decision_instance_count The count of the cleanable historic decision instances, referring to history time to live.
     *
     * @return self
     */
    public function setCleanableDecisionInstanceCount($cleanable_decision_instance_count)
    {
        $this->container['cleanable_decision_instance_count'] = $cleanable_decision_instance_count;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id The tenant id of the decision definition.
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


