<?php
/**
 * JobQueryDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * JobQueryDto Class Doc Comment
 *
 * @category Class
 * @description A Job instance query which defines a list of Job instances
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class JobQueryDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JobQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'job_id' => 'string',
        'job_ids' => 'string[]',
        'job_definition_id' => 'string',
        'process_instance_id' => 'string',
        'process_instance_ids' => 'string[]',
        'execution_id' => 'string',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'activity_id' => 'string',
        'with_retries_left' => 'bool',
        'executable' => 'bool',
        'timers' => 'bool',
        'messages' => 'bool',
        'due_dates' => '\OpenAPI\Client\Model\JobConditionQueryParameterDto[]',
        'create_times' => '\OpenAPI\Client\Model\JobConditionQueryParameterDto[]',
        'with_exception' => 'bool',
        'exception_message' => 'string',
        'failed_activity_id' => 'string',
        'no_retries_left' => 'bool',
        'active' => 'bool',
        'suspended' => 'bool',
        'priority_lower_than_or_equals' => 'int',
        'priority_higher_than_or_equals' => 'int',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'include_jobs_without_tenant_id' => 'bool',
        'sorting' => '\OpenAPI\Client\Model\JobQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'job_id' => null,
        'job_ids' => null,
        'job_definition_id' => null,
        'process_instance_id' => null,
        'process_instance_ids' => null,
        'execution_id' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'activity_id' => null,
        'with_retries_left' => null,
        'executable' => null,
        'timers' => null,
        'messages' => null,
        'due_dates' => null,
        'create_times' => null,
        'with_exception' => null,
        'exception_message' => null,
        'failed_activity_id' => null,
        'no_retries_left' => null,
        'active' => null,
        'suspended' => null,
        'priority_lower_than_or_equals' => 'int64',
        'priority_higher_than_or_equals' => 'int64',
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'include_jobs_without_tenant_id' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_id' => 'jobId',
        'job_ids' => 'jobIds',
        'job_definition_id' => 'jobDefinitionId',
        'process_instance_id' => 'processInstanceId',
        'process_instance_ids' => 'processInstanceIds',
        'execution_id' => 'executionId',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'activity_id' => 'activityId',
        'with_retries_left' => 'withRetriesLeft',
        'executable' => 'executable',
        'timers' => 'timers',
        'messages' => 'messages',
        'due_dates' => 'dueDates',
        'create_times' => 'createTimes',
        'with_exception' => 'withException',
        'exception_message' => 'exceptionMessage',
        'failed_activity_id' => 'failedActivityId',
        'no_retries_left' => 'noRetriesLeft',
        'active' => 'active',
        'suspended' => 'suspended',
        'priority_lower_than_or_equals' => 'priorityLowerThanOrEquals',
        'priority_higher_than_or_equals' => 'priorityHigherThanOrEquals',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'include_jobs_without_tenant_id' => 'includeJobsWithoutTenantId',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_id' => 'setJobId',
        'job_ids' => 'setJobIds',
        'job_definition_id' => 'setJobDefinitionId',
        'process_instance_id' => 'setProcessInstanceId',
        'process_instance_ids' => 'setProcessInstanceIds',
        'execution_id' => 'setExecutionId',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'activity_id' => 'setActivityId',
        'with_retries_left' => 'setWithRetriesLeft',
        'executable' => 'setExecutable',
        'timers' => 'setTimers',
        'messages' => 'setMessages',
        'due_dates' => 'setDueDates',
        'create_times' => 'setCreateTimes',
        'with_exception' => 'setWithException',
        'exception_message' => 'setExceptionMessage',
        'failed_activity_id' => 'setFailedActivityId',
        'no_retries_left' => 'setNoRetriesLeft',
        'active' => 'setActive',
        'suspended' => 'setSuspended',
        'priority_lower_than_or_equals' => 'setPriorityLowerThanOrEquals',
        'priority_higher_than_or_equals' => 'setPriorityHigherThanOrEquals',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'include_jobs_without_tenant_id' => 'setIncludeJobsWithoutTenantId',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_id' => 'getJobId',
        'job_ids' => 'getJobIds',
        'job_definition_id' => 'getJobDefinitionId',
        'process_instance_id' => 'getProcessInstanceId',
        'process_instance_ids' => 'getProcessInstanceIds',
        'execution_id' => 'getExecutionId',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'activity_id' => 'getActivityId',
        'with_retries_left' => 'getWithRetriesLeft',
        'executable' => 'getExecutable',
        'timers' => 'getTimers',
        'messages' => 'getMessages',
        'due_dates' => 'getDueDates',
        'create_times' => 'getCreateTimes',
        'with_exception' => 'getWithException',
        'exception_message' => 'getExceptionMessage',
        'failed_activity_id' => 'getFailedActivityId',
        'no_retries_left' => 'getNoRetriesLeft',
        'active' => 'getActive',
        'suspended' => 'getSuspended',
        'priority_lower_than_or_equals' => 'getPriorityLowerThanOrEquals',
        'priority_higher_than_or_equals' => 'getPriorityHigherThanOrEquals',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'include_jobs_without_tenant_id' => 'getIncludeJobsWithoutTenantId',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_id'] = $data['job_id'] ?? null;
        $this->container['job_ids'] = $data['job_ids'] ?? null;
        $this->container['job_definition_id'] = $data['job_definition_id'] ?? null;
        $this->container['process_instance_id'] = $data['process_instance_id'] ?? null;
        $this->container['process_instance_ids'] = $data['process_instance_ids'] ?? null;
        $this->container['execution_id'] = $data['execution_id'] ?? null;
        $this->container['process_definition_id'] = $data['process_definition_id'] ?? null;
        $this->container['process_definition_key'] = $data['process_definition_key'] ?? null;
        $this->container['activity_id'] = $data['activity_id'] ?? null;
        $this->container['with_retries_left'] = $data['with_retries_left'] ?? null;
        $this->container['executable'] = $data['executable'] ?? null;
        $this->container['timers'] = $data['timers'] ?? null;
        $this->container['messages'] = $data['messages'] ?? null;
        $this->container['due_dates'] = $data['due_dates'] ?? null;
        $this->container['create_times'] = $data['create_times'] ?? null;
        $this->container['with_exception'] = $data['with_exception'] ?? null;
        $this->container['exception_message'] = $data['exception_message'] ?? null;
        $this->container['failed_activity_id'] = $data['failed_activity_id'] ?? null;
        $this->container['no_retries_left'] = $data['no_retries_left'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['suspended'] = $data['suspended'] ?? null;
        $this->container['priority_lower_than_or_equals'] = $data['priority_lower_than_or_equals'] ?? null;
        $this->container['priority_higher_than_or_equals'] = $data['priority_higher_than_or_equals'] ?? null;
        $this->container['tenant_id_in'] = $data['tenant_id_in'] ?? null;
        $this->container['without_tenant_id'] = $data['without_tenant_id'] ?? null;
        $this->container['include_jobs_without_tenant_id'] = $data['include_jobs_without_tenant_id'] ?? null;
        $this->container['sorting'] = $data['sorting'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_id
     *
     * @return string|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string|null $job_id Filter by job id.
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets job_ids
     *
     * @return string[]|null
     */
    public function getJobIds()
    {
        return $this->container['job_ids'];
    }

    /**
     * Sets job_ids
     *
     * @param string[]|null $job_ids Filter by a  list of job ids.
     *
     * @return self
     */
    public function setJobIds($job_ids)
    {
        $this->container['job_ids'] = $job_ids;

        return $this;
    }

    /**
     * Gets job_definition_id
     *
     * @return string|null
     */
    public function getJobDefinitionId()
    {
        return $this->container['job_definition_id'];
    }

    /**
     * Sets job_definition_id
     *
     * @param string|null $job_definition_id Only select jobs which exist for the given job definition.
     *
     * @return self
     */
    public function setJobDefinitionId($job_definition_id)
    {
        $this->container['job_definition_id'] = $job_definition_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string|null
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string|null $process_instance_id Only select jobs which exist for the given process instance.
     *
     * @return self
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_ids
     *
     * @return string[]|null
     */
    public function getProcessInstanceIds()
    {
        return $this->container['process_instance_ids'];
    }

    /**
     * Sets process_instance_ids
     *
     * @param string[]|null $process_instance_ids Only select jobs which exist for the given  list of process instance ids.
     *
     * @return self
     */
    public function setProcessInstanceIds($process_instance_ids)
    {
        $this->container['process_instance_ids'] = $process_instance_ids;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string|null
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string|null $execution_id Only select jobs which exist for the given execution.
     *
     * @return self
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string|null
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string|null $process_definition_id Filter by the id of the process definition the jobs run on.
     *
     * @return self
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string|null
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string|null $process_definition_key Filter by the key of the process definition the jobs run on.
     *
     * @return self
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string|null
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string|null $activity_id Only select jobs which exist for an activity with the given id.
     *
     * @return self
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets with_retries_left
     *
     * @return bool|null
     */
    public function getWithRetriesLeft()
    {
        return $this->container['with_retries_left'];
    }

    /**
     * Sets with_retries_left
     *
     * @param bool|null $with_retries_left Only select jobs which have retries left. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setWithRetriesLeft($with_retries_left)
    {
        $this->container['with_retries_left'] = $with_retries_left;

        return $this;
    }

    /**
     * Gets executable
     *
     * @return bool|null
     */
    public function getExecutable()
    {
        return $this->container['executable'];
    }

    /**
     * Sets executable
     *
     * @param bool|null $executable Only select jobs which are executable, i.e., retries > 0 and due date is `null` or due date is in the past. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setExecutable($executable)
    {
        $this->container['executable'] = $executable;

        return $this;
    }

    /**
     * Gets timers
     *
     * @return bool|null
     */
    public function getTimers()
    {
        return $this->container['timers'];
    }

    /**
     * Sets timers
     *
     * @param bool|null $timers Only select jobs that are timers. Cannot be used together with `messages`. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setTimers($timers)
    {
        $this->container['timers'] = $timers;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return bool|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param bool|null $messages Only select jobs that are messages. Cannot be used together with `timers`. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets due_dates
     *
     * @return \OpenAPI\Client\Model\JobConditionQueryParameterDto[]|null
     */
    public function getDueDates()
    {
        return $this->container['due_dates'];
    }

    /**
     * Sets due_dates
     *
     * @param \OpenAPI\Client\Model\JobConditionQueryParameterDto[]|null $due_dates Only select jobs where the due date is lower or higher than the given date.
     *
     * @return self
     */
    public function setDueDates($due_dates)
    {
        $this->container['due_dates'] = $due_dates;

        return $this;
    }

    /**
     * Gets create_times
     *
     * @return \OpenAPI\Client\Model\JobConditionQueryParameterDto[]|null
     */
    public function getCreateTimes()
    {
        return $this->container['create_times'];
    }

    /**
     * Sets create_times
     *
     * @param \OpenAPI\Client\Model\JobConditionQueryParameterDto[]|null $create_times Only select jobs created before or after the given date.
     *
     * @return self
     */
    public function setCreateTimes($create_times)
    {
        $this->container['create_times'] = $create_times;

        return $this;
    }

    /**
     * Gets with_exception
     *
     * @return bool|null
     */
    public function getWithException()
    {
        return $this->container['with_exception'];
    }

    /**
     * Sets with_exception
     *
     * @param bool|null $with_exception Only select jobs that failed due to an exception. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setWithException($with_exception)
    {
        $this->container['with_exception'] = $with_exception;

        return $this;
    }

    /**
     * Gets exception_message
     *
     * @return string|null
     */
    public function getExceptionMessage()
    {
        return $this->container['exception_message'];
    }

    /**
     * Sets exception_message
     *
     * @param string|null $exception_message Only select jobs that failed due to an exception with the given message.
     *
     * @return self
     */
    public function setExceptionMessage($exception_message)
    {
        $this->container['exception_message'] = $exception_message;

        return $this;
    }

    /**
     * Gets failed_activity_id
     *
     * @return string|null
     */
    public function getFailedActivityId()
    {
        return $this->container['failed_activity_id'];
    }

    /**
     * Sets failed_activity_id
     *
     * @param string|null $failed_activity_id Only select jobs that failed due to an exception at an activity with the given id.
     *
     * @return self
     */
    public function setFailedActivityId($failed_activity_id)
    {
        $this->container['failed_activity_id'] = $failed_activity_id;

        return $this;
    }

    /**
     * Gets no_retries_left
     *
     * @return bool|null
     */
    public function getNoRetriesLeft()
    {
        return $this->container['no_retries_left'];
    }

    /**
     * Sets no_retries_left
     *
     * @param bool|null $no_retries_left Only select jobs which have no retries left. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setNoRetriesLeft($no_retries_left)
    {
        $this->container['no_retries_left'] = $no_retries_left;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Only include active jobs. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool|null
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool|null $suspended Only include suspended jobs. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets priority_lower_than_or_equals
     *
     * @return int|null
     */
    public function getPriorityLowerThanOrEquals()
    {
        return $this->container['priority_lower_than_or_equals'];
    }

    /**
     * Sets priority_lower_than_or_equals
     *
     * @param int|null $priority_lower_than_or_equals Only include jobs with a priority lower than or equal to the given value. Value must be a valid `long` value.
     *
     * @return self
     */
    public function setPriorityLowerThanOrEquals($priority_lower_than_or_equals)
    {
        $this->container['priority_lower_than_or_equals'] = $priority_lower_than_or_equals;

        return $this;
    }

    /**
     * Gets priority_higher_than_or_equals
     *
     * @return int|null
     */
    public function getPriorityHigherThanOrEquals()
    {
        return $this->container['priority_higher_than_or_equals'];
    }

    /**
     * Sets priority_higher_than_or_equals
     *
     * @param int|null $priority_higher_than_or_equals Only include jobs with a priority higher than or equal to the given value. Value must be a valid `long` value.
     *
     * @return self
     */
    public function setPriorityHigherThanOrEquals($priority_higher_than_or_equals)
    {
        $this->container['priority_higher_than_or_equals'] = $priority_higher_than_or_equals;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]|null
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[]|null $tenant_id_in Only include jobs which belong to one of the passed  tenant ids.
     *
     * @return self
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool|null
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool|null $without_tenant_id Only include jobs which belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets include_jobs_without_tenant_id
     *
     * @return bool|null
     */
    public function getIncludeJobsWithoutTenantId()
    {
        return $this->container['include_jobs_without_tenant_id'];
    }

    /**
     * Sets include_jobs_without_tenant_id
     *
     * @param bool|null $include_jobs_without_tenant_id Include jobs which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
     *
     * @return self
     */
    public function setIncludeJobsWithoutTenantId($include_jobs_without_tenant_id)
    {
        $this->container['include_jobs_without_tenant_id'] = $include_jobs_without_tenant_id;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \OpenAPI\Client\Model\JobQueryDtoSorting[]|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \OpenAPI\Client\Model\JobQueryDtoSorting[]|null $sorting An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Does not have an effect for the `count` endpoint.
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


