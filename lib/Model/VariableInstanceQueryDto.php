<?php
/**
 * VariableInstanceQueryDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.15.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VariableInstanceQueryDto Class Doc Comment
 *
 * @category Class
 * @description A variable instance query which defines a list of variable instances
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class VariableInstanceQueryDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VariableInstanceQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'variable_name' => 'string',
        'variable_name_like' => 'string',
        'process_instance_id_in' => 'string[]',
        'execution_id_in' => 'string[]',
        'case_instance_id_in' => 'string[]',
        'case_execution_id_in' => 'string[]',
        'task_id_in' => 'string[]',
        'batch_id_in' => 'string[]',
        'activity_instance_id_in' => 'string[]',
        'tenant_id_in' => 'string[]',
        'variable_values' => '\OpenAPI\Client\Model\VariableQueryParameterDto[]',
        'variable_names_ignore_case' => 'bool',
        'variable_values_ignore_case' => 'bool',
        'sorting' => '\OpenAPI\Client\Model\VariableInstanceQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'variable_name' => null,
        'variable_name_like' => null,
        'process_instance_id_in' => null,
        'execution_id_in' => null,
        'case_instance_id_in' => null,
        'case_execution_id_in' => null,
        'task_id_in' => null,
        'batch_id_in' => null,
        'activity_instance_id_in' => null,
        'tenant_id_in' => null,
        'variable_values' => null,
        'variable_names_ignore_case' => null,
        'variable_values_ignore_case' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'variable_name' => 'variableName',
        'variable_name_like' => 'variableNameLike',
        'process_instance_id_in' => 'processInstanceIdIn',
        'execution_id_in' => 'executionIdIn',
        'case_instance_id_in' => 'caseInstanceIdIn',
        'case_execution_id_in' => 'caseExecutionIdIn',
        'task_id_in' => 'taskIdIn',
        'batch_id_in' => 'batchIdIn',
        'activity_instance_id_in' => 'activityInstanceIdIn',
        'tenant_id_in' => 'tenantIdIn',
        'variable_values' => 'variableValues',
        'variable_names_ignore_case' => 'variableNamesIgnoreCase',
        'variable_values_ignore_case' => 'variableValuesIgnoreCase',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'variable_name' => 'setVariableName',
        'variable_name_like' => 'setVariableNameLike',
        'process_instance_id_in' => 'setProcessInstanceIdIn',
        'execution_id_in' => 'setExecutionIdIn',
        'case_instance_id_in' => 'setCaseInstanceIdIn',
        'case_execution_id_in' => 'setCaseExecutionIdIn',
        'task_id_in' => 'setTaskIdIn',
        'batch_id_in' => 'setBatchIdIn',
        'activity_instance_id_in' => 'setActivityInstanceIdIn',
        'tenant_id_in' => 'setTenantIdIn',
        'variable_values' => 'setVariableValues',
        'variable_names_ignore_case' => 'setVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'setVariableValuesIgnoreCase',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'variable_name' => 'getVariableName',
        'variable_name_like' => 'getVariableNameLike',
        'process_instance_id_in' => 'getProcessInstanceIdIn',
        'execution_id_in' => 'getExecutionIdIn',
        'case_instance_id_in' => 'getCaseInstanceIdIn',
        'case_execution_id_in' => 'getCaseExecutionIdIn',
        'task_id_in' => 'getTaskIdIn',
        'batch_id_in' => 'getBatchIdIn',
        'activity_instance_id_in' => 'getActivityInstanceIdIn',
        'tenant_id_in' => 'getTenantIdIn',
        'variable_values' => 'getVariableValues',
        'variable_names_ignore_case' => 'getVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'getVariableValuesIgnoreCase',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['variable_name'] = $data['variable_name'] ?? null;
        $this->container['variable_name_like'] = $data['variable_name_like'] ?? null;
        $this->container['process_instance_id_in'] = $data['process_instance_id_in'] ?? null;
        $this->container['execution_id_in'] = $data['execution_id_in'] ?? null;
        $this->container['case_instance_id_in'] = $data['case_instance_id_in'] ?? null;
        $this->container['case_execution_id_in'] = $data['case_execution_id_in'] ?? null;
        $this->container['task_id_in'] = $data['task_id_in'] ?? null;
        $this->container['batch_id_in'] = $data['batch_id_in'] ?? null;
        $this->container['activity_instance_id_in'] = $data['activity_instance_id_in'] ?? null;
        $this->container['tenant_id_in'] = $data['tenant_id_in'] ?? null;
        $this->container['variable_values'] = $data['variable_values'] ?? null;
        $this->container['variable_names_ignore_case'] = $data['variable_names_ignore_case'] ?? null;
        $this->container['variable_values_ignore_case'] = $data['variable_values_ignore_case'] ?? null;
        $this->container['sorting'] = $data['sorting'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets variable_name
     *
     * @return string|null
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     *
     * @param string|null $variable_name Filter by variable instance name.
     *
     * @return self
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variable_name_like
     *
     * @return string|null
     */
    public function getVariableNameLike()
    {
        return $this->container['variable_name_like'];
    }

    /**
     * Sets variable_name_like
     *
     * @param string|null $variable_name_like Filter by the variable instance name. The parameter can include the wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains (`%`name`%`).
     *
     * @return self
     */
    public function setVariableNameLike($variable_name_like)
    {
        $this->container['variable_name_like'] = $variable_name_like;

        return $this;
    }

    /**
     * Gets process_instance_id_in
     *
     * @return string[]|null
     */
    public function getProcessInstanceIdIn()
    {
        return $this->container['process_instance_id_in'];
    }

    /**
     * Sets process_instance_id_in
     *
     * @param string[]|null $process_instance_id_in Only include variable instances which belong to one of the passed  process instance ids.
     *
     * @return self
     */
    public function setProcessInstanceIdIn($process_instance_id_in)
    {
        $this->container['process_instance_id_in'] = $process_instance_id_in;

        return $this;
    }

    /**
     * Gets execution_id_in
     *
     * @return string[]|null
     */
    public function getExecutionIdIn()
    {
        return $this->container['execution_id_in'];
    }

    /**
     * Sets execution_id_in
     *
     * @param string[]|null $execution_id_in Only include variable instances which belong to one of the passed  execution ids.
     *
     * @return self
     */
    public function setExecutionIdIn($execution_id_in)
    {
        $this->container['execution_id_in'] = $execution_id_in;

        return $this;
    }

    /**
     * Gets case_instance_id_in
     *
     * @return string[]|null
     */
    public function getCaseInstanceIdIn()
    {
        return $this->container['case_instance_id_in'];
    }

    /**
     * Sets case_instance_id_in
     *
     * @param string[]|null $case_instance_id_in Only include variable instances which belong to one of the passed  case instance ids.
     *
     * @return self
     */
    public function setCaseInstanceIdIn($case_instance_id_in)
    {
        $this->container['case_instance_id_in'] = $case_instance_id_in;

        return $this;
    }

    /**
     * Gets case_execution_id_in
     *
     * @return string[]|null
     */
    public function getCaseExecutionIdIn()
    {
        return $this->container['case_execution_id_in'];
    }

    /**
     * Sets case_execution_id_in
     *
     * @param string[]|null $case_execution_id_in Only include variable instances which belong to one of the passed  case execution ids.
     *
     * @return self
     */
    public function setCaseExecutionIdIn($case_execution_id_in)
    {
        $this->container['case_execution_id_in'] = $case_execution_id_in;

        return $this;
    }

    /**
     * Gets task_id_in
     *
     * @return string[]|null
     */
    public function getTaskIdIn()
    {
        return $this->container['task_id_in'];
    }

    /**
     * Sets task_id_in
     *
     * @param string[]|null $task_id_in Only include variable instances which belong to one of the passed  task ids.
     *
     * @return self
     */
    public function setTaskIdIn($task_id_in)
    {
        $this->container['task_id_in'] = $task_id_in;

        return $this;
    }

    /**
     * Gets batch_id_in
     *
     * @return string[]|null
     */
    public function getBatchIdIn()
    {
        return $this->container['batch_id_in'];
    }

    /**
     * Sets batch_id_in
     *
     * @param string[]|null $batch_id_in Only include variable instances which belong to one of the passed  batch ids.
     *
     * @return self
     */
    public function setBatchIdIn($batch_id_in)
    {
        $this->container['batch_id_in'] = $batch_id_in;

        return $this;
    }

    /**
     * Gets activity_instance_id_in
     *
     * @return string[]|null
     */
    public function getActivityInstanceIdIn()
    {
        return $this->container['activity_instance_id_in'];
    }

    /**
     * Sets activity_instance_id_in
     *
     * @param string[]|null $activity_instance_id_in Only include variable instances which belong to one of the passed  activity instance ids.
     *
     * @return self
     */
    public function setActivityInstanceIdIn($activity_instance_id_in)
    {
        $this->container['activity_instance_id_in'] = $activity_instance_id_in;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]|null
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[]|null $tenant_id_in Only include variable instances which belong to one of the passed  tenant ids.
     *
     * @return self
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets variable_values
     *
     * @return \OpenAPI\Client\Model\VariableQueryParameterDto[]|null
     */
    public function getVariableValues()
    {
        return $this->container['variable_values'];
    }

    /**
     * Sets variable_values
     *
     * @param \OpenAPI\Client\Model\VariableQueryParameterDto[]|null $variable_values An array to only include variable instances that have the certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`
     *
     * @return self
     */
    public function setVariableValues($variable_values)
    {
        $this->container['variable_values'] = $variable_values;

        return $this;
    }

    /**
     * Gets variable_names_ignore_case
     *
     * @return bool|null
     */
    public function getVariableNamesIgnoreCase()
    {
        return $this->container['variable_names_ignore_case'];
    }

    /**
     * Sets variable_names_ignore_case
     *
     * @param bool|null $variable_names_ignore_case Match all variable names provided in `variableValues` case-insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
     *
     * @return self
     */
    public function setVariableNamesIgnoreCase($variable_names_ignore_case)
    {
        $this->container['variable_names_ignore_case'] = $variable_names_ignore_case;

        return $this;
    }

    /**
     * Gets variable_values_ignore_case
     *
     * @return bool|null
     */
    public function getVariableValuesIgnoreCase()
    {
        return $this->container['variable_values_ignore_case'];
    }

    /**
     * Sets variable_values_ignore_case
     *
     * @param bool|null $variable_values_ignore_case Match all variable values provided in `variableValues` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
     *
     * @return self
     */
    public function setVariableValuesIgnoreCase($variable_values_ignore_case)
    {
        $this->container['variable_values_ignore_case'] = $variable_values_ignore_case;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \OpenAPI\Client\Model\VariableInstanceQueryDtoSorting[]|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \OpenAPI\Client\Model\VariableInstanceQueryDtoSorting[]|null $sorting An array of criteria to sort the result by. Each element of the array is an object that specifies one ordering.                       The position in the array identifies the rank of an ordering, i.e., whether it is primary, secondary, etc.                       Sorting has no effect for `count` endpoints
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


