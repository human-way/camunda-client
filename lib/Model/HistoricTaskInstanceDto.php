<?php
/**
 * HistoricTaskInstanceDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HistoricTaskInstanceDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class HistoricTaskInstanceDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoricTaskInstanceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_id' => 'string',
        'process_instance_id' => 'string',
        'execution_id' => 'string',
        'case_definition_key' => 'string',
        'case_definition_id' => 'string',
        'case_instance_id' => 'string',
        'case_execution_id' => 'string',
        'activity_instance_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'delete_reason' => 'string',
        'owner' => 'string',
        'assignee' => 'string',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'duration' => 'int',
        'task_definition_key' => 'string',
        'priority' => 'int',
        'due' => '\DateTime',
        'parent_task_id' => 'string',
        'follow_up' => '\DateTime',
        'tenant_id' => 'string',
        'removal_time' => '\DateTime',
        'root_process_instance_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'process_definition_key' => null,
        'process_definition_id' => null,
        'process_instance_id' => null,
        'execution_id' => null,
        'case_definition_key' => null,
        'case_definition_id' => null,
        'case_instance_id' => null,
        'case_execution_id' => null,
        'activity_instance_id' => null,
        'name' => null,
        'description' => null,
        'delete_reason' => null,
        'owner' => null,
        'assignee' => null,
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'duration' => 'int64',
        'task_definition_key' => null,
        'priority' => 'int32',
        'due' => 'date-time',
        'parent_task_id' => null,
        'follow_up' => 'date-time',
        'tenant_id' => null,
        'removal_time' => 'date-time',
        'root_process_instance_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_id' => 'processDefinitionId',
        'process_instance_id' => 'processInstanceId',
        'execution_id' => 'executionId',
        'case_definition_key' => 'caseDefinitionKey',
        'case_definition_id' => 'caseDefinitionId',
        'case_instance_id' => 'caseInstanceId',
        'case_execution_id' => 'caseExecutionId',
        'activity_instance_id' => 'activityInstanceId',
        'name' => 'name',
        'description' => 'description',
        'delete_reason' => 'deleteReason',
        'owner' => 'owner',
        'assignee' => 'assignee',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'duration' => 'duration',
        'task_definition_key' => 'taskDefinitionKey',
        'priority' => 'priority',
        'due' => 'due',
        'parent_task_id' => 'parentTaskId',
        'follow_up' => 'followUp',
        'tenant_id' => 'tenantId',
        'removal_time' => 'removalTime',
        'root_process_instance_id' => 'rootProcessInstanceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_instance_id' => 'setProcessInstanceId',
        'execution_id' => 'setExecutionId',
        'case_definition_key' => 'setCaseDefinitionKey',
        'case_definition_id' => 'setCaseDefinitionId',
        'case_instance_id' => 'setCaseInstanceId',
        'case_execution_id' => 'setCaseExecutionId',
        'activity_instance_id' => 'setActivityInstanceId',
        'name' => 'setName',
        'description' => 'setDescription',
        'delete_reason' => 'setDeleteReason',
        'owner' => 'setOwner',
        'assignee' => 'setAssignee',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'duration' => 'setDuration',
        'task_definition_key' => 'setTaskDefinitionKey',
        'priority' => 'setPriority',
        'due' => 'setDue',
        'parent_task_id' => 'setParentTaskId',
        'follow_up' => 'setFollowUp',
        'tenant_id' => 'setTenantId',
        'removal_time' => 'setRemovalTime',
        'root_process_instance_id' => 'setRootProcessInstanceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_instance_id' => 'getProcessInstanceId',
        'execution_id' => 'getExecutionId',
        'case_definition_key' => 'getCaseDefinitionKey',
        'case_definition_id' => 'getCaseDefinitionId',
        'case_instance_id' => 'getCaseInstanceId',
        'case_execution_id' => 'getCaseExecutionId',
        'activity_instance_id' => 'getActivityInstanceId',
        'name' => 'getName',
        'description' => 'getDescription',
        'delete_reason' => 'getDeleteReason',
        'owner' => 'getOwner',
        'assignee' => 'getAssignee',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'duration' => 'getDuration',
        'task_definition_key' => 'getTaskDefinitionKey',
        'priority' => 'getPriority',
        'due' => 'getDue',
        'parent_task_id' => 'getParentTaskId',
        'follow_up' => 'getFollowUp',
        'tenant_id' => 'getTenantId',
        'removal_time' => 'getRemovalTime',
        'root_process_instance_id' => 'getRootProcessInstanceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['process_definition_key'] = $data['process_definition_key'] ?? null;
        $this->container['process_definition_id'] = $data['process_definition_id'] ?? null;
        $this->container['process_instance_id'] = $data['process_instance_id'] ?? null;
        $this->container['execution_id'] = $data['execution_id'] ?? null;
        $this->container['case_definition_key'] = $data['case_definition_key'] ?? null;
        $this->container['case_definition_id'] = $data['case_definition_id'] ?? null;
        $this->container['case_instance_id'] = $data['case_instance_id'] ?? null;
        $this->container['case_execution_id'] = $data['case_execution_id'] ?? null;
        $this->container['activity_instance_id'] = $data['activity_instance_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['delete_reason'] = $data['delete_reason'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['assignee'] = $data['assignee'] ?? null;
        $this->container['start_time'] = $data['start_time'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['task_definition_key'] = $data['task_definition_key'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['due'] = $data['due'] ?? null;
        $this->container['parent_task_id'] = $data['parent_task_id'] ?? null;
        $this->container['follow_up'] = $data['follow_up'] ?? null;
        $this->container['tenant_id'] = $data['tenant_id'] ?? null;
        $this->container['removal_time'] = $data['removal_time'] ?? null;
        $this->container['root_process_instance_id'] = $data['root_process_instance_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The task id.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string|null
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string|null $process_definition_key The key of the process definition the task belongs to.
     *
     * @return self
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string|null
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string|null $process_definition_id The id of the process definition the task belongs to.
     *
     * @return self
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string|null
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string|null $process_instance_id The id of the process instance the task belongs to.
     *
     * @return self
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string|null
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string|null $execution_id The id of the execution the task belongs to.
     *
     * @return self
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets case_definition_key
     *
     * @return string|null
     */
    public function getCaseDefinitionKey()
    {
        return $this->container['case_definition_key'];
    }

    /**
     * Sets case_definition_key
     *
     * @param string|null $case_definition_key The key of the case definition the task belongs to.
     *
     * @return self
     */
    public function setCaseDefinitionKey($case_definition_key)
    {
        $this->container['case_definition_key'] = $case_definition_key;

        return $this;
    }

    /**
     * Gets case_definition_id
     *
     * @return string|null
     */
    public function getCaseDefinitionId()
    {
        return $this->container['case_definition_id'];
    }

    /**
     * Sets case_definition_id
     *
     * @param string|null $case_definition_id The id of the case definition the task belongs to.
     *
     * @return self
     */
    public function setCaseDefinitionId($case_definition_id)
    {
        $this->container['case_definition_id'] = $case_definition_id;

        return $this;
    }

    /**
     * Gets case_instance_id
     *
     * @return string|null
     */
    public function getCaseInstanceId()
    {
        return $this->container['case_instance_id'];
    }

    /**
     * Sets case_instance_id
     *
     * @param string|null $case_instance_id The id of the case instance the task belongs to.
     *
     * @return self
     */
    public function setCaseInstanceId($case_instance_id)
    {
        $this->container['case_instance_id'] = $case_instance_id;

        return $this;
    }

    /**
     * Gets case_execution_id
     *
     * @return string|null
     */
    public function getCaseExecutionId()
    {
        return $this->container['case_execution_id'];
    }

    /**
     * Sets case_execution_id
     *
     * @param string|null $case_execution_id The id of the case execution the task belongs to.
     *
     * @return self
     */
    public function setCaseExecutionId($case_execution_id)
    {
        $this->container['case_execution_id'] = $case_execution_id;

        return $this;
    }

    /**
     * Gets activity_instance_id
     *
     * @return string|null
     */
    public function getActivityInstanceId()
    {
        return $this->container['activity_instance_id'];
    }

    /**
     * Sets activity_instance_id
     *
     * @param string|null $activity_instance_id The id of the activity that this object is an instance of.
     *
     * @return self
     */
    public function setActivityInstanceId($activity_instance_id)
    {
        $this->container['activity_instance_id'] = $activity_instance_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The task name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The task's description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets delete_reason
     *
     * @return string|null
     */
    public function getDeleteReason()
    {
        return $this->container['delete_reason'];
    }

    /**
     * Sets delete_reason
     *
     * @param string|null $delete_reason The task's delete reason.
     *
     * @return self
     */
    public function setDeleteReason($delete_reason)
    {
        $this->container['delete_reason'] = $delete_reason;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner The owner's id.
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return string|null
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param string|null $assignee The assignee's id.
     *
     * @return self
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time The time the task was started. Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time The time the task ended. Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration The time the task took to finish (in milliseconds).
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets task_definition_key
     *
     * @return string|null
     */
    public function getTaskDefinitionKey()
    {
        return $this->container['task_definition_key'];
    }

    /**
     * Sets task_definition_key
     *
     * @param string|null $task_definition_key The task's key.
     *
     * @return self
     */
    public function setTaskDefinitionKey($task_definition_key)
    {
        $this->container['task_definition_key'] = $task_definition_key;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority The task's priority.
     *
     * @return self
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets due
     *
     * @return \DateTime|null
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     *
     * @param \DateTime|null $due The task's due date. Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setDue($due)
    {
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets parent_task_id
     *
     * @return string|null
     */
    public function getParentTaskId()
    {
        return $this->container['parent_task_id'];
    }

    /**
     * Sets parent_task_id
     *
     * @param string|null $parent_task_id The id of the parent task, if this task is a subtask.
     *
     * @return self
     */
    public function setParentTaskId($parent_task_id)
    {
        $this->container['parent_task_id'] = $parent_task_id;

        return $this;
    }

    /**
     * Gets follow_up
     *
     * @return \DateTime|null
     */
    public function getFollowUp()
    {
        return $this->container['follow_up'];
    }

    /**
     * Sets follow_up
     *
     * @param \DateTime|null $follow_up The follow-up date for the task. Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setFollowUp($follow_up)
    {
        $this->container['follow_up'] = $follow_up;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id The tenant id of the task instance.
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets removal_time
     *
     * @return \DateTime|null
     */
    public function getRemovalTime()
    {
        return $this->container['removal_time'];
    }

    /**
     * Sets removal_time
     *
     * @param \DateTime|null $removal_time The time after which the task should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return self
     */
    public function setRemovalTime($removal_time)
    {
        $this->container['removal_time'] = $removal_time;

        return $this;
    }

    /**
     * Gets root_process_instance_id
     *
     * @return string|null
     */
    public function getRootProcessInstanceId()
    {
        return $this->container['root_process_instance_id'];
    }

    /**
     * Sets root_process_instance_id
     *
     * @param string|null $root_process_instance_id The process instance id of the root process instance that initiated the process containing this task.
     *
     * @return self
     */
    public function setRootProcessInstanceId($root_process_instance_id)
    {
        $this->container['root_process_instance_id'] = $root_process_instance_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


