<?php
/**
 * HistoricUserOperationLogApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HistoricUserOperationLogApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HistoricUserOperationLogApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation clearAnnotationUserOperationLog
     *
     * Clear Annotation of an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearAnnotationUserOperationLog($operation_id)
    {
        $this->clearAnnotationUserOperationLogWithHttpInfo($operation_id);
    }

    /**
     * Operation clearAnnotationUserOperationLogWithHttpInfo
     *
     * Clear Annotation of an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearAnnotationUserOperationLogWithHttpInfo($operation_id)
    {
        $request = $this->clearAnnotationUserOperationLogRequest($operation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearAnnotationUserOperationLogAsync
     *
     * Clear Annotation of an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearAnnotationUserOperationLogAsync($operation_id)
    {
        return $this->clearAnnotationUserOperationLogAsyncWithHttpInfo($operation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearAnnotationUserOperationLogAsyncWithHttpInfo
     *
     * Clear Annotation of an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearAnnotationUserOperationLogAsyncWithHttpInfo($operation_id)
    {
        $returnType = '';
        $request = $this->clearAnnotationUserOperationLogRequest($operation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearAnnotationUserOperationLog'
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clearAnnotationUserOperationLogRequest($operation_id)
    {
        // verify the required parameter 'operation_id' is set
        if ($operation_id === null || (is_array($operation_id) && count($operation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation_id when calling clearAnnotationUserOperationLog'
            );
        }

        $resourcePath = '/history/user-operation/{operationId}/clear-annotation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($operation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'operationId' . '}',
                ObjectSerializer::toPathValue($operation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryUserOperationCount
     *
     * Get User Operation Log Count
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryUserOperationCount($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null)
    {
        list($response) = $this->queryUserOperationCountWithHttpInfo($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp);
        return $response;
    }

    /**
     * Operation queryUserOperationCountWithHttpInfo
     *
     * Get User Operation Log Count
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryUserOperationCountWithHttpInfo($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null)
    {
        $request = $this->queryUserOperationCountRequest($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryUserOperationCountAsync
     *
     * Get User Operation Log Count
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserOperationCountAsync($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null)
    {
        return $this->queryUserOperationCountAsyncWithHttpInfo($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryUserOperationCountAsyncWithHttpInfo
     *
     * Get User Operation Log Count
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserOperationCountAsyncWithHttpInfo($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->queryUserOperationCountRequest($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryUserOperationCount'
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryUserOperationCountRequest($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null)
    {

        $resourcePath = '/history/user-operation/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($case_definition_id !== null) {
            if('form' === 'form' && is_array($case_definition_id)) {
                foreach($case_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseDefinitionId'] = $case_definition_id;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($case_execution_id !== null) {
            if('form' === 'form' && is_array($case_execution_id)) {
                foreach($case_execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseExecutionId'] = $case_execution_id;
            }
        }
        // query params
        if ($task_id !== null) {
            if('form' === 'form' && is_array($task_id)) {
                foreach($task_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['taskId'] = $task_id;
            }
        }
        // query params
        if ($external_task_id !== null) {
            if('form' === 'form' && is_array($external_task_id)) {
                foreach($external_task_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externalTaskId'] = $external_task_id;
            }
        }
        // query params
        if ($batch_id !== null) {
            if('form' === 'form' && is_array($batch_id)) {
                foreach($batch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['batchId'] = $batch_id;
            }
        }
        // query params
        if ($job_id !== null) {
            if('form' === 'form' && is_array($job_id)) {
                foreach($job_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobId'] = $job_id;
            }
        }
        // query params
        if ($job_definition_id !== null) {
            if('form' === 'form' && is_array($job_definition_id)) {
                foreach($job_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionId'] = $job_definition_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }
        // query params
        if ($operation_id !== null) {
            if('form' === 'form' && is_array($operation_id)) {
                foreach($operation_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationId'] = $operation_id;
            }
        }
        // query params
        if ($operation_type !== null) {
            if('form' === 'form' && is_array($operation_type)) {
                foreach($operation_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationType'] = $operation_type;
            }
        }
        // query params
        if ($entity_type !== null) {
            if('form' === 'form' && is_array($entity_type)) {
                foreach($entity_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entityType'] = $entity_type;
            }
        }
        // query params
        if ($entity_type_in !== null) {
            if('form' === 'form' && is_array($entity_type_in)) {
                foreach($entity_type_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entityTypeIn'] = $entity_type_in;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($category_in !== null) {
            if('form' === 'form' && is_array($category_in)) {
                foreach($category_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['categoryIn'] = $category_in;
            }
        }
        // query params
        if ($property !== null) {
            if('form' === 'form' && is_array($property)) {
                foreach($property as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['property'] = $property;
            }
        }
        // query params
        if ($after_timestamp !== null) {
            if('form' === 'form' && is_array($after_timestamp)) {
                foreach($after_timestamp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['afterTimestamp'] = $after_timestamp;
            }
        }
        // query params
        if ($before_timestamp !== null) {
            if('form' === 'form' && is_array($before_timestamp)) {
                foreach($before_timestamp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['beforeTimestamp'] = $before_timestamp;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryUserOperationEntries
     *
     * Get User Operation Log (Historic)
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserOperationLogEntryDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryUserOperationEntries($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->queryUserOperationEntriesWithHttpInfo($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp, $sort_by, $sort_order, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation queryUserOperationEntriesWithHttpInfo
     *
     * Get User Operation Log (Historic)
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserOperationLogEntryDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryUserOperationEntriesWithHttpInfo($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $request = $this->queryUserOperationEntriesRequest($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp, $sort_by, $sort_order, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UserOperationLogEntryDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UserOperationLogEntryDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UserOperationLogEntryDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserOperationLogEntryDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryUserOperationEntriesAsync
     *
     * Get User Operation Log (Historic)
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserOperationEntriesAsync($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        return $this->queryUserOperationEntriesAsyncWithHttpInfo($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp, $sort_by, $sort_order, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryUserOperationEntriesAsyncWithHttpInfo
     *
     * Get User Operation Log (Historic)
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryUserOperationEntriesAsyncWithHttpInfo($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\OpenAPI\Client\Model\UserOperationLogEntryDto[]';
        $request = $this->queryUserOperationEntriesRequest($deployment_id, $process_definition_id, $process_definition_key, $process_instance_id, $execution_id, $case_definition_id, $case_instance_id, $case_execution_id, $task_id, $external_task_id, $batch_id, $job_id, $job_definition_id, $user_id, $operation_id, $operation_type, $entity_type, $entity_type_in, $category, $category_in, $property, $after_timestamp, $before_timestamp, $sort_by, $sort_order, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryUserOperationEntries'
     *
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $case_definition_id Filter by case definition id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $task_id Only include operations on this task. (optional)
     * @param  string $external_task_id Only include operations on this external task. (optional)
     * @param  string $batch_id Only include operations on this batch. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $user_id Only include operations of this user. (optional)
     * @param  string $operation_id Filter by the id of the operation. This allows fetching of multiple entries which are part of a composite operation. (optional)
     * @param  string $operation_type Filter by the type of the operation like &#x60;Claim&#x60; or &#x60;Delegate&#x60;. See the [Javadoc](https://docs.camunda.org/manual/latest/reference/javadoc/?org/camunda/bpm/engine/history/UserOperationLogEntry.html) for a list of available operation types. (optional)
     * @param  string $entity_type Filter by the type of the entity that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $entity_type_in Filter by a comma-separated list of types of the entities that was affected by this operation, possible values are &#x60;Task&#x60;, &#x60;Attachment&#x60; or &#x60;IdentityLink&#x60;. (optional)
     * @param  string $category Filter by the category that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $category_in Filter by a comma-separated list of categories that this operation is associated with, possible values are &#x60;TaskWorker&#x60;, &#x60;Admin&#x60; or &#x60;Operator&#x60;. (optional)
     * @param  string $property Only include operations that changed this property, e.g., &#x60;owner&#x60; or &#x60;assignee&#x60;. (optional)
     * @param  \DateTime $after_timestamp Restrict to entries that were created after the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $before_timestamp Restrict to entries that were created before the given timestamp. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the timestamp must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryUserOperationEntriesRequest($deployment_id = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $execution_id = null, $case_definition_id = null, $case_instance_id = null, $case_execution_id = null, $task_id = null, $external_task_id = null, $batch_id = null, $job_id = null, $job_definition_id = null, $user_id = null, $operation_id = null, $operation_type = null, $entity_type = null, $entity_type_in = null, $category = null, $category_in = null, $property = null, $after_timestamp = null, $before_timestamp = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/history/user-operation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($case_definition_id !== null) {
            if('form' === 'form' && is_array($case_definition_id)) {
                foreach($case_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseDefinitionId'] = $case_definition_id;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($case_execution_id !== null) {
            if('form' === 'form' && is_array($case_execution_id)) {
                foreach($case_execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseExecutionId'] = $case_execution_id;
            }
        }
        // query params
        if ($task_id !== null) {
            if('form' === 'form' && is_array($task_id)) {
                foreach($task_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['taskId'] = $task_id;
            }
        }
        // query params
        if ($external_task_id !== null) {
            if('form' === 'form' && is_array($external_task_id)) {
                foreach($external_task_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externalTaskId'] = $external_task_id;
            }
        }
        // query params
        if ($batch_id !== null) {
            if('form' === 'form' && is_array($batch_id)) {
                foreach($batch_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['batchId'] = $batch_id;
            }
        }
        // query params
        if ($job_id !== null) {
            if('form' === 'form' && is_array($job_id)) {
                foreach($job_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobId'] = $job_id;
            }
        }
        // query params
        if ($job_definition_id !== null) {
            if('form' === 'form' && is_array($job_definition_id)) {
                foreach($job_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionId'] = $job_definition_id;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }
        // query params
        if ($operation_id !== null) {
            if('form' === 'form' && is_array($operation_id)) {
                foreach($operation_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationId'] = $operation_id;
            }
        }
        // query params
        if ($operation_type !== null) {
            if('form' === 'form' && is_array($operation_type)) {
                foreach($operation_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['operationType'] = $operation_type;
            }
        }
        // query params
        if ($entity_type !== null) {
            if('form' === 'form' && is_array($entity_type)) {
                foreach($entity_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entityType'] = $entity_type;
            }
        }
        // query params
        if ($entity_type_in !== null) {
            if('form' === 'form' && is_array($entity_type_in)) {
                foreach($entity_type_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['entityTypeIn'] = $entity_type_in;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($category_in !== null) {
            if('form' === 'form' && is_array($category_in)) {
                foreach($category_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['categoryIn'] = $category_in;
            }
        }
        // query params
        if ($property !== null) {
            if('form' === 'form' && is_array($property)) {
                foreach($property as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['property'] = $property;
            }
        }
        // query params
        if ($after_timestamp !== null) {
            if('form' === 'form' && is_array($after_timestamp)) {
                foreach($after_timestamp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['afterTimestamp'] = $after_timestamp;
            }
        }
        // query params
        if ($before_timestamp !== null) {
            if('form' === 'form' && is_array($before_timestamp)) {
                foreach($before_timestamp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['beforeTimestamp'] = $before_timestamp;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAnnotationUserOperationLog
     *
     * Set Annotation to an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto annotation_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setAnnotationUserOperationLog($operation_id, $annotation_dto = null)
    {
        $this->setAnnotationUserOperationLogWithHttpInfo($operation_id, $annotation_dto);
    }

    /**
     * Operation setAnnotationUserOperationLogWithHttpInfo
     *
     * Set Annotation to an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAnnotationUserOperationLogWithHttpInfo($operation_id, $annotation_dto = null)
    {
        $request = $this->setAnnotationUserOperationLogRequest($operation_id, $annotation_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAnnotationUserOperationLogAsync
     *
     * Set Annotation to an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAnnotationUserOperationLogAsync($operation_id, $annotation_dto = null)
    {
        return $this->setAnnotationUserOperationLogAsyncWithHttpInfo($operation_id, $annotation_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAnnotationUserOperationLogAsyncWithHttpInfo
     *
     * Set Annotation to an User Operation Log (Historic)
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAnnotationUserOperationLogAsyncWithHttpInfo($operation_id, $annotation_dto = null)
    {
        $returnType = '';
        $request = $this->setAnnotationUserOperationLogRequest($operation_id, $annotation_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAnnotationUserOperationLog'
     *
     * @param  string $operation_id The operation id of the operation log to be updated. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAnnotationUserOperationLogRequest($operation_id, $annotation_dto = null)
    {
        // verify the required parameter 'operation_id' is set
        if ($operation_id === null || (is_array($operation_id) && count($operation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation_id when calling setAnnotationUserOperationLog'
            );
        }

        $resourcePath = '/history/user-operation/{operationId}/set-annotation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($operation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'operationId' . '}',
                ObjectSerializer::toPathValue($operation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($annotation_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($annotation_dto));
            } else {
                $httpBody = $annotation_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
