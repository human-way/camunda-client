<?php
/**
 * HistoricProcessInstanceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HistoricProcessInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HistoricProcessInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteHistoricProcessInstance
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHistoricProcessInstance($id, $fail_if_not_exists = null)
    {
        $this->deleteHistoricProcessInstanceWithHttpInfo($id, $fail_if_not_exists);
    }

    /**
     * Operation deleteHistoricProcessInstanceWithHttpInfo
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricProcessInstanceWithHttpInfo($id, $fail_if_not_exists = null)
    {
        $request = $this->deleteHistoricProcessInstanceRequest($id, $fail_if_not_exists);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricProcessInstanceAsync
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstanceAsync($id, $fail_if_not_exists = null)
    {
        return $this->deleteHistoricProcessInstanceAsyncWithHttpInfo($id, $fail_if_not_exists)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstanceAsyncWithHttpInfo($id, $fail_if_not_exists = null)
    {
        $returnType = '';
        $request = $this->deleteHistoricProcessInstanceRequest($id, $fail_if_not_exists);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricProcessInstance'
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteHistoricProcessInstanceRequest($id, $fail_if_not_exists = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHistoricProcessInstance'
            );
        }

        $resourcePath = '/history/process-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fail_if_not_exists !== null) {
            if('form' === 'form' && is_array($fail_if_not_exists)) {
                foreach($fail_if_not_exists as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failIfNotExists'] = $fail_if_not_exists;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHistoricProcessInstancesAsync
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricProcessInstancesDto $delete_historic_process_instances_dto delete_historic_process_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function deleteHistoricProcessInstancesAsync($delete_historic_process_instances_dto = null)
    {
        list($response) = $this->deleteHistoricProcessInstancesAsyncWithHttpInfo($delete_historic_process_instances_dto);
        return $response;
    }

    /**
     * Operation deleteHistoricProcessInstancesAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricProcessInstancesDto $delete_historic_process_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricProcessInstancesAsyncWithHttpInfo($delete_historic_process_instances_dto = null)
    {
        $request = $this->deleteHistoricProcessInstancesAsyncRequest($delete_historic_process_instances_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BatchDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BatchDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricProcessInstancesAsyncAsync
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricProcessInstancesDto $delete_historic_process_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstancesAsyncAsync($delete_historic_process_instances_dto = null)
    {
        return $this->deleteHistoricProcessInstancesAsyncAsyncWithHttpInfo($delete_historic_process_instances_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricProcessInstancesAsyncAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricProcessInstancesDto $delete_historic_process_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstancesAsyncAsyncWithHttpInfo($delete_historic_process_instances_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\BatchDto';
        $request = $this->deleteHistoricProcessInstancesAsyncRequest($delete_historic_process_instances_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricProcessInstancesAsync'
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricProcessInstancesDto $delete_historic_process_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteHistoricProcessInstancesAsyncRequest($delete_historic_process_instances_dto = null)
    {

        $resourcePath = '/history/process-instance/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($delete_historic_process_instances_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($delete_historic_process_instances_dto));
            } else {
                $httpBody = $delete_historic_process_instances_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstance
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstance($id)
    {
        $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo($id);
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo($id)
    {
        $request = $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstanceAsync
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstanceAsync($id)
    {
        return $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricVariableInstancesOfHistoricProcessInstance'
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHistoricVariableInstancesOfHistoricProcessInstance'
            );
        }

        $resourcePath = '/history/process-instance/{id}/variable-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstance
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricProcessInstanceDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricProcessInstance($id)
    {
        list($response) = $this->getHistoricProcessInstanceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstanceWithHttpInfo
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricProcessInstanceDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstanceWithHttpInfo($id)
    {
        $request = $this->getHistoricProcessInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricProcessInstanceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricProcessInstanceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricProcessInstanceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricProcessInstanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstanceAsync
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceAsync($id)
    {
        return $this->getHistoricProcessInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricProcessInstanceDto';
        $request = $this->getHistoricProcessInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstance'
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricProcessInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricProcessInstance'
            );
        }

        $resourcePath = '/history/process-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstanceDurationReport
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DurationReportResultDto[]|\OpenAPI\Client\Model\ExceptionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricProcessInstanceDurationReport($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        list($response) = $this->getHistoricProcessInstanceDurationReportWithHttpInfo($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstanceDurationReportWithHttpInfo
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DurationReportResultDto[]|\OpenAPI\Client\Model\ExceptionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstanceDurationReportWithHttpInfo($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        $request = $this->getHistoricProcessInstanceDurationReportRequest($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DurationReportResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DurationReportResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DurationReportResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DurationReportResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstanceDurationReportAsync
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceDurationReportAsync($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        return $this->getHistoricProcessInstanceDurationReportAsyncWithHttpInfo($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstanceDurationReportAsyncWithHttpInfo
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceDurationReportAsyncWithHttpInfo($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        $returnType = '\OpenAPI\Client\Model\DurationReportResultDto[]';
        $request = $this->getHistoricProcessInstanceDurationReportRequest($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstanceDurationReport'
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricProcessInstanceDurationReportRequest($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        // verify the required parameter 'report_type' is set
        if ($report_type === null || (is_array($report_type) && count($report_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_type when calling getHistoricProcessInstanceDurationReport'
            );
        }
        // verify the required parameter 'period_unit' is set
        if ($period_unit === null || (is_array($period_unit) && count($period_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_unit when calling getHistoricProcessInstanceDurationReport'
            );
        }

        $resourcePath = '/history/process-instance/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($report_type !== null) {
            if('form' === 'form' && is_array($report_type)) {
                foreach($report_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['reportType'] = $report_type;
            }
        }
        // query params
        if ($period_unit !== null) {
            if('form' === 'form' && is_array($period_unit)) {
                foreach($period_unit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['periodUnit'] = $period_unit;
            }
        }
        // query params
        if ($process_definition_id_in !== null) {
            if('form' === 'form' && is_array($process_definition_id_in)) {
                foreach($process_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionIdIn'] = $process_definition_id_in;
            }
        }
        // query params
        if ($process_definition_key_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_in)) {
                foreach($process_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyIn'] = $process_definition_key_in;
            }
        }
        // query params
        if ($started_before !== null) {
            if('form' === 'form' && is_array($started_before)) {
                foreach($started_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedBefore'] = $started_before;
            }
        }
        // query params
        if ($started_after !== null) {
            if('form' === 'form' && is_array($started_after)) {
                foreach($started_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedAfter'] = $started_after;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/csv', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/csv', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstances
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricProcessInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricProcessInstances($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        list($response) = $this->getHistoricProcessInstancesWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstancesWithHttpInfo
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricProcessInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstancesWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $request = $this->getHistoricProcessInstancesRequest($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricProcessInstanceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstancesAsync
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesAsync($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        return $this->getHistoricProcessInstancesAsyncWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstancesAsyncWithHttpInfo
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesAsyncWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]';
        $request = $this->getHistoricProcessInstancesRequest($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstances'
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricProcessInstancesRequest($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {

        $resourcePath = '/history/process-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_instance_ids !== null) {
            if('form' === 'form' && is_array($process_instance_ids)) {
                foreach($process_instance_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIds'] = $process_instance_ids;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_definition_key_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_in)) {
                foreach($process_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyIn'] = $process_definition_key_in;
            }
        }
        // query params
        if ($process_definition_name !== null) {
            if('form' === 'form' && is_array($process_definition_name)) {
                foreach($process_definition_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionName'] = $process_definition_name;
            }
        }
        // query params
        if ($process_definition_name_like !== null) {
            if('form' === 'form' && is_array($process_definition_name_like)) {
                foreach($process_definition_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionNameLike'] = $process_definition_name_like;
            }
        }
        // query params
        if ($process_definition_key_not_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_not_in)) {
                foreach($process_definition_key_not_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyNotIn'] = $process_definition_key_not_in;
            }
        }
        // query params
        if ($process_instance_business_key !== null) {
            if('form' === 'form' && is_array($process_instance_business_key)) {
                foreach($process_instance_business_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceBusinessKey'] = $process_instance_business_key;
            }
        }
        // query params
        if ($process_instance_business_key_like !== null) {
            if('form' === 'form' && is_array($process_instance_business_key_like)) {
                foreach($process_instance_business_key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceBusinessKeyLike'] = $process_instance_business_key_like;
            }
        }
        // query params
        if ($root_process_instances !== null) {
            if('form' === 'form' && is_array($root_process_instances)) {
                foreach($root_process_instances as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootProcessInstances'] = $root_process_instances;
            }
        }
        // query params
        if ($finished !== null) {
            if('form' === 'form' && is_array($finished)) {
                foreach($finished as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['finished'] = $finished;
            }
        }
        // query params
        if ($unfinished !== null) {
            if('form' === 'form' && is_array($unfinished)) {
                foreach($unfinished as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unfinished'] = $unfinished;
            }
        }
        // query params
        if ($with_incidents !== null) {
            if('form' === 'form' && is_array($with_incidents)) {
                foreach($with_incidents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withIncidents'] = $with_incidents;
            }
        }
        // query params
        if ($with_root_incidents !== null) {
            if('form' === 'form' && is_array($with_root_incidents)) {
                foreach($with_root_incidents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withRootIncidents'] = $with_root_incidents;
            }
        }
        // query params
        if ($incident_type !== null) {
            if('form' === 'form' && is_array($incident_type)) {
                foreach($incident_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentType'] = $incident_type;
            }
        }
        // query params
        if ($incident_status !== null) {
            if('form' === 'form' && is_array($incident_status)) {
                foreach($incident_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentStatus'] = $incident_status;
            }
        }
        // query params
        if ($incident_message !== null) {
            if('form' === 'form' && is_array($incident_message)) {
                foreach($incident_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessage'] = $incident_message;
            }
        }
        // query params
        if ($incident_message_like !== null) {
            if('form' === 'form' && is_array($incident_message_like)) {
                foreach($incident_message_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessageLike'] = $incident_message_like;
            }
        }
        // query params
        if ($started_before !== null) {
            if('form' === 'form' && is_array($started_before)) {
                foreach($started_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedBefore'] = $started_before;
            }
        }
        // query params
        if ($started_after !== null) {
            if('form' === 'form' && is_array($started_after)) {
                foreach($started_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedAfter'] = $started_after;
            }
        }
        // query params
        if ($finished_before !== null) {
            if('form' === 'form' && is_array($finished_before)) {
                foreach($finished_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['finishedBefore'] = $finished_before;
            }
        }
        // query params
        if ($finished_after !== null) {
            if('form' === 'form' && is_array($finished_after)) {
                foreach($finished_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['finishedAfter'] = $finished_after;
            }
        }
        // query params
        if ($executed_activity_after !== null) {
            if('form' === 'form' && is_array($executed_activity_after)) {
                foreach($executed_activity_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedActivityAfter'] = $executed_activity_after;
            }
        }
        // query params
        if ($executed_activity_before !== null) {
            if('form' === 'form' && is_array($executed_activity_before)) {
                foreach($executed_activity_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedActivityBefore'] = $executed_activity_before;
            }
        }
        // query params
        if ($executed_job_after !== null) {
            if('form' === 'form' && is_array($executed_job_after)) {
                foreach($executed_job_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedJobAfter'] = $executed_job_after;
            }
        }
        // query params
        if ($executed_job_before !== null) {
            if('form' === 'form' && is_array($executed_job_before)) {
                foreach($executed_job_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedJobBefore'] = $executed_job_before;
            }
        }
        // query params
        if ($started_by !== null) {
            if('form' === 'form' && is_array($started_by)) {
                foreach($started_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedBy'] = $started_by;
            }
        }
        // query params
        if ($super_process_instance_id !== null) {
            if('form' === 'form' && is_array($super_process_instance_id)) {
                foreach($super_process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superProcessInstanceId'] = $super_process_instance_id;
            }
        }
        // query params
        if ($sub_process_instance_id !== null) {
            if('form' === 'form' && is_array($sub_process_instance_id)) {
                foreach($sub_process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subProcessInstanceId'] = $sub_process_instance_id;
            }
        }
        // query params
        if ($super_case_instance_id !== null) {
            if('form' === 'form' && is_array($super_case_instance_id)) {
                foreach($super_case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superCaseInstanceId'] = $super_case_instance_id;
            }
        }
        // query params
        if ($sub_case_instance_id !== null) {
            if('form' === 'form' && is_array($sub_case_instance_id)) {
                foreach($sub_case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subCaseInstanceId'] = $sub_case_instance_id;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($executed_activity_id_in !== null) {
            if('form' === 'form' && is_array($executed_activity_id_in)) {
                foreach($executed_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedActivityIdIn'] = $executed_activity_id_in;
            }
        }
        // query params
        if ($active_activity_id_in !== null) {
            if('form' === 'form' && is_array($active_activity_id_in)) {
                foreach($active_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activeActivityIdIn'] = $active_activity_id_in;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($suspended !== null) {
            if('form' === 'form' && is_array($suspended)) {
                foreach($suspended as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['suspended'] = $suspended;
            }
        }
        // query params
        if ($completed !== null) {
            if('form' === 'form' && is_array($completed)) {
                foreach($completed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['completed'] = $completed;
            }
        }
        // query params
        if ($externally_terminated !== null) {
            if('form' === 'form' && is_array($externally_terminated)) {
                foreach($externally_terminated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externallyTerminated'] = $externally_terminated;
            }
        }
        // query params
        if ($internally_terminated !== null) {
            if('form' === 'form' && is_array($internally_terminated)) {
                foreach($internally_terminated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['internallyTerminated'] = $internally_terminated;
            }
        }
        // query params
        if ($variables !== null) {
            if('form' === 'form' && is_array($variables)) {
                foreach($variables as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variables'] = $variables;
            }
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_names_ignore_case)) {
                foreach($variable_names_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNamesIgnoreCase'] = $variable_names_ignore_case;
            }
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_values_ignore_case)) {
                foreach($variable_values_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValuesIgnoreCase'] = $variable_values_ignore_case;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstancesCount
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricProcessInstancesCount($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        list($response) = $this->getHistoricProcessInstancesCountWithHttpInfo($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstancesCountWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstancesCountWithHttpInfo($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $request = $this->getHistoricProcessInstancesCountRequest($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstancesCountAsync
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesCountAsync($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        return $this->getHistoricProcessInstancesCountAsyncWithHttpInfo($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstancesCountAsyncWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesCountAsyncWithHttpInfo($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->getHistoricProcessInstancesCountRequest($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstancesCount'
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricProcessInstancesCountRequest($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {

        $resourcePath = '/history/process-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_instance_ids !== null) {
            if('form' === 'form' && is_array($process_instance_ids)) {
                foreach($process_instance_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIds'] = $process_instance_ids;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_definition_key_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_in)) {
                foreach($process_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyIn'] = $process_definition_key_in;
            }
        }
        // query params
        if ($process_definition_name !== null) {
            if('form' === 'form' && is_array($process_definition_name)) {
                foreach($process_definition_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionName'] = $process_definition_name;
            }
        }
        // query params
        if ($process_definition_name_like !== null) {
            if('form' === 'form' && is_array($process_definition_name_like)) {
                foreach($process_definition_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionNameLike'] = $process_definition_name_like;
            }
        }
        // query params
        if ($process_definition_key_not_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_not_in)) {
                foreach($process_definition_key_not_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyNotIn'] = $process_definition_key_not_in;
            }
        }
        // query params
        if ($process_instance_business_key !== null) {
            if('form' === 'form' && is_array($process_instance_business_key)) {
                foreach($process_instance_business_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceBusinessKey'] = $process_instance_business_key;
            }
        }
        // query params
        if ($process_instance_business_key_like !== null) {
            if('form' === 'form' && is_array($process_instance_business_key_like)) {
                foreach($process_instance_business_key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceBusinessKeyLike'] = $process_instance_business_key_like;
            }
        }
        // query params
        if ($root_process_instances !== null) {
            if('form' === 'form' && is_array($root_process_instances)) {
                foreach($root_process_instances as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootProcessInstances'] = $root_process_instances;
            }
        }
        // query params
        if ($finished !== null) {
            if('form' === 'form' && is_array($finished)) {
                foreach($finished as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['finished'] = $finished;
            }
        }
        // query params
        if ($unfinished !== null) {
            if('form' === 'form' && is_array($unfinished)) {
                foreach($unfinished as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unfinished'] = $unfinished;
            }
        }
        // query params
        if ($with_incidents !== null) {
            if('form' === 'form' && is_array($with_incidents)) {
                foreach($with_incidents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withIncidents'] = $with_incidents;
            }
        }
        // query params
        if ($with_root_incidents !== null) {
            if('form' === 'form' && is_array($with_root_incidents)) {
                foreach($with_root_incidents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withRootIncidents'] = $with_root_incidents;
            }
        }
        // query params
        if ($incident_type !== null) {
            if('form' === 'form' && is_array($incident_type)) {
                foreach($incident_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentType'] = $incident_type;
            }
        }
        // query params
        if ($incident_status !== null) {
            if('form' === 'form' && is_array($incident_status)) {
                foreach($incident_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentStatus'] = $incident_status;
            }
        }
        // query params
        if ($incident_message !== null) {
            if('form' === 'form' && is_array($incident_message)) {
                foreach($incident_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessage'] = $incident_message;
            }
        }
        // query params
        if ($incident_message_like !== null) {
            if('form' === 'form' && is_array($incident_message_like)) {
                foreach($incident_message_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessageLike'] = $incident_message_like;
            }
        }
        // query params
        if ($started_before !== null) {
            if('form' === 'form' && is_array($started_before)) {
                foreach($started_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedBefore'] = $started_before;
            }
        }
        // query params
        if ($started_after !== null) {
            if('form' === 'form' && is_array($started_after)) {
                foreach($started_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedAfter'] = $started_after;
            }
        }
        // query params
        if ($finished_before !== null) {
            if('form' === 'form' && is_array($finished_before)) {
                foreach($finished_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['finishedBefore'] = $finished_before;
            }
        }
        // query params
        if ($finished_after !== null) {
            if('form' === 'form' && is_array($finished_after)) {
                foreach($finished_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['finishedAfter'] = $finished_after;
            }
        }
        // query params
        if ($executed_activity_after !== null) {
            if('form' === 'form' && is_array($executed_activity_after)) {
                foreach($executed_activity_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedActivityAfter'] = $executed_activity_after;
            }
        }
        // query params
        if ($executed_activity_before !== null) {
            if('form' === 'form' && is_array($executed_activity_before)) {
                foreach($executed_activity_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedActivityBefore'] = $executed_activity_before;
            }
        }
        // query params
        if ($executed_job_after !== null) {
            if('form' === 'form' && is_array($executed_job_after)) {
                foreach($executed_job_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedJobAfter'] = $executed_job_after;
            }
        }
        // query params
        if ($executed_job_before !== null) {
            if('form' === 'form' && is_array($executed_job_before)) {
                foreach($executed_job_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedJobBefore'] = $executed_job_before;
            }
        }
        // query params
        if ($started_by !== null) {
            if('form' === 'form' && is_array($started_by)) {
                foreach($started_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startedBy'] = $started_by;
            }
        }
        // query params
        if ($super_process_instance_id !== null) {
            if('form' === 'form' && is_array($super_process_instance_id)) {
                foreach($super_process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superProcessInstanceId'] = $super_process_instance_id;
            }
        }
        // query params
        if ($sub_process_instance_id !== null) {
            if('form' === 'form' && is_array($sub_process_instance_id)) {
                foreach($sub_process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subProcessInstanceId'] = $sub_process_instance_id;
            }
        }
        // query params
        if ($super_case_instance_id !== null) {
            if('form' === 'form' && is_array($super_case_instance_id)) {
                foreach($super_case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superCaseInstanceId'] = $super_case_instance_id;
            }
        }
        // query params
        if ($sub_case_instance_id !== null) {
            if('form' === 'form' && is_array($sub_case_instance_id)) {
                foreach($sub_case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subCaseInstanceId'] = $sub_case_instance_id;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($executed_activity_id_in !== null) {
            if('form' === 'form' && is_array($executed_activity_id_in)) {
                foreach($executed_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executedActivityIdIn'] = $executed_activity_id_in;
            }
        }
        // query params
        if ($active_activity_id_in !== null) {
            if('form' === 'form' && is_array($active_activity_id_in)) {
                foreach($active_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activeActivityIdIn'] = $active_activity_id_in;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($suspended !== null) {
            if('form' === 'form' && is_array($suspended)) {
                foreach($suspended as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['suspended'] = $suspended;
            }
        }
        // query params
        if ($completed !== null) {
            if('form' === 'form' && is_array($completed)) {
                foreach($completed as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['completed'] = $completed;
            }
        }
        // query params
        if ($externally_terminated !== null) {
            if('form' === 'form' && is_array($externally_terminated)) {
                foreach($externally_terminated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['externallyTerminated'] = $externally_terminated;
            }
        }
        // query params
        if ($internally_terminated !== null) {
            if('form' === 'form' && is_array($internally_terminated)) {
                foreach($internally_terminated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['internallyTerminated'] = $internally_terminated;
            }
        }
        // query params
        if ($variables !== null) {
            if('form' === 'form' && is_array($variables)) {
                foreach($variables as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variables'] = $variables;
            }
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_names_ignore_case)) {
                foreach($variable_names_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNamesIgnoreCase'] = $variable_names_ignore_case;
            }
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_values_ignore_case)) {
                foreach($variable_values_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValuesIgnoreCase'] = $variable_values_ignore_case;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricProcessInstances
     *
     * Get List (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto historic_process_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricProcessInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryHistoricProcessInstances($first_result = null, $max_results = null, $historic_process_instance_query_dto = null)
    {
        list($response) = $this->queryHistoricProcessInstancesWithHttpInfo($first_result, $max_results, $historic_process_instance_query_dto);
        return $response;
    }

    /**
     * Operation queryHistoricProcessInstancesWithHttpInfo
     *
     * Get List (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricProcessInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricProcessInstancesWithHttpInfo($first_result = null, $max_results = null, $historic_process_instance_query_dto = null)
    {
        $request = $this->queryHistoricProcessInstancesRequest($first_result, $max_results, $historic_process_instance_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricProcessInstanceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricProcessInstancesAsync
     *
     * Get List (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesAsync($first_result = null, $max_results = null, $historic_process_instance_query_dto = null)
    {
        return $this->queryHistoricProcessInstancesAsyncWithHttpInfo($first_result, $max_results, $historic_process_instance_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricProcessInstancesAsyncWithHttpInfo
     *
     * Get List (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesAsyncWithHttpInfo($first_result = null, $max_results = null, $historic_process_instance_query_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricProcessInstanceDto[]';
        $request = $this->queryHistoricProcessInstancesRequest($first_result, $max_results, $historic_process_instance_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricProcessInstances'
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryHistoricProcessInstancesRequest($first_result = null, $max_results = null, $historic_process_instance_query_dto = null)
    {

        $resourcePath = '/history/process-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historic_process_instance_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historic_process_instance_query_dto));
            } else {
                $httpBody = $historic_process_instance_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricProcessInstancesCount
     *
     * Get List Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto historic_process_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryHistoricProcessInstancesCount($historic_process_instance_query_dto = null)
    {
        list($response) = $this->queryHistoricProcessInstancesCountWithHttpInfo($historic_process_instance_query_dto);
        return $response;
    }

    /**
     * Operation queryHistoricProcessInstancesCountWithHttpInfo
     *
     * Get List Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricProcessInstancesCountWithHttpInfo($historic_process_instance_query_dto = null)
    {
        $request = $this->queryHistoricProcessInstancesCountRequest($historic_process_instance_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricProcessInstancesCountAsync
     *
     * Get List Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesCountAsync($historic_process_instance_query_dto = null)
    {
        return $this->queryHistoricProcessInstancesCountAsyncWithHttpInfo($historic_process_instance_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricProcessInstancesCountAsyncWithHttpInfo
     *
     * Get List Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesCountAsyncWithHttpInfo($historic_process_instance_query_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->queryHistoricProcessInstancesCountRequest($historic_process_instance_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricProcessInstancesCount'
     *
     * @param  \OpenAPI\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryHistoricProcessInstancesCountRequest($historic_process_instance_query_dto = null)
    {

        $resourcePath = '/history/process-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historic_process_instance_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historic_process_instance_query_dto));
            } else {
                $httpBody = $historic_process_instance_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setRemovalTimeAsync
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $set_removal_time_to_historic_process_instances_dto set_removal_time_to_historic_process_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function setRemovalTimeAsync($set_removal_time_to_historic_process_instances_dto = null)
    {
        list($response) = $this->setRemovalTimeAsyncWithHttpInfo($set_removal_time_to_historic_process_instances_dto);
        return $response;
    }

    /**
     * Operation setRemovalTimeAsyncWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $set_removal_time_to_historic_process_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRemovalTimeAsyncWithHttpInfo($set_removal_time_to_historic_process_instances_dto = null)
    {
        $request = $this->setRemovalTimeAsyncRequest($set_removal_time_to_historic_process_instances_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BatchDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BatchDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setRemovalTimeAsyncAsync
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $set_removal_time_to_historic_process_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncAsync($set_removal_time_to_historic_process_instances_dto = null)
    {
        return $this->setRemovalTimeAsyncAsyncWithHttpInfo($set_removal_time_to_historic_process_instances_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setRemovalTimeAsyncAsyncWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $set_removal_time_to_historic_process_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncAsyncWithHttpInfo($set_removal_time_to_historic_process_instances_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\BatchDto';
        $request = $this->setRemovalTimeAsyncRequest($set_removal_time_to_historic_process_instances_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setRemovalTimeAsync'
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $set_removal_time_to_historic_process_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setRemovalTimeAsyncRequest($set_removal_time_to_historic_process_instances_dto = null)
    {

        $resourcePath = '/history/process-instance/set-removal-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_removal_time_to_historic_process_instances_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_removal_time_to_historic_process_instances_dto));
            } else {
                $httpBody = $set_removal_time_to_historic_process_instances_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
