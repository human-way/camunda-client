<?php
/**
 * HistoricJobLogApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HistoricJobLogApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HistoricJobLogApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHistoricJobLog
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricJobLogDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricJobLog($id)
    {
        list($response) = $this->getHistoricJobLogWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHistoricJobLogWithHttpInfo
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricJobLogDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricJobLogWithHttpInfo($id)
    {
        $request = $this->getHistoricJobLogRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricJobLogDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricJobLogDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricJobLogDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricJobLogDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricJobLogAsync
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogAsync($id)
    {
        return $this->getHistoricJobLogAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricJobLogAsyncWithHttpInfo
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricJobLogDto';
        $request = $this->getHistoricJobLogRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricJobLog'
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricJobLogRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricJobLog'
            );
        }

        $resourcePath = '/history/job-log/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricJobLogs
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricJobLogDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricJobLogs($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->getHistoricJobLogsWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation getHistoricJobLogsWithHttpInfo
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricJobLogDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricJobLogsWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $request = $this->getHistoricJobLogsRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricJobLogDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricJobLogDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricJobLogDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricJobLogDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricJobLogsAsync
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsAsync($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        return $this->getHistoricJobLogsAsyncWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricJobLogsAsyncWithHttpInfo
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsAsyncWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricJobLogDto[]';
        $request = $this->getHistoricJobLogsRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricJobLogs'
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricJobLogsRequest($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/history/job-log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($log_id !== null) {
            if('form' === 'form' && is_array($log_id)) {
                foreach($log_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logId'] = $log_id;
            }
        }
        // query params
        if ($job_id !== null) {
            if('form' === 'form' && is_array($job_id)) {
                foreach($job_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobId'] = $job_id;
            }
        }
        // query params
        if ($job_exception_message !== null) {
            if('form' === 'form' && is_array($job_exception_message)) {
                foreach($job_exception_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobExceptionMessage'] = $job_exception_message;
            }
        }
        // query params
        if ($job_definition_id !== null) {
            if('form' === 'form' && is_array($job_definition_id)) {
                foreach($job_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionId'] = $job_definition_id;
            }
        }
        // query params
        if ($job_definition_type !== null) {
            if('form' === 'form' && is_array($job_definition_type)) {
                foreach($job_definition_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionType'] = $job_definition_type;
            }
        }
        // query params
        if ($job_definition_configuration !== null) {
            if('form' === 'form' && is_array($job_definition_configuration)) {
                foreach($job_definition_configuration as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionConfiguration'] = $job_definition_configuration;
            }
        }
        // query params
        if ($activity_id_in !== null) {
            if('form' === 'form' && is_array($activity_id_in)) {
                foreach($activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityIdIn'] = $activity_id_in;
            }
        }
        // query params
        if ($failed_activity_id_in !== null) {
            if('form' === 'form' && is_array($failed_activity_id_in)) {
                foreach($failed_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failedActivityIdIn'] = $failed_activity_id_in;
            }
        }
        // query params
        if ($execution_id_in !== null) {
            if('form' === 'form' && is_array($execution_id_in)) {
                foreach($execution_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionIdIn'] = $execution_id_in;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($hostname !== null) {
            if('form' === 'form' && is_array($hostname)) {
                foreach($hostname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['hostname'] = $hostname;
            }
        }
        // query params
        if ($job_priority_lower_than_or_equals !== null) {
            if('form' === 'form' && is_array($job_priority_lower_than_or_equals)) {
                foreach($job_priority_lower_than_or_equals as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobPriorityLowerThanOrEquals'] = $job_priority_lower_than_or_equals;
            }
        }
        // query params
        if ($job_priority_higher_than_or_equals !== null) {
            if('form' === 'form' && is_array($job_priority_higher_than_or_equals)) {
                foreach($job_priority_higher_than_or_equals as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobPriorityHigherThanOrEquals'] = $job_priority_higher_than_or_equals;
            }
        }
        // query params
        if ($creation_log !== null) {
            if('form' === 'form' && is_array($creation_log)) {
                foreach($creation_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['creationLog'] = $creation_log;
            }
        }
        // query params
        if ($failure_log !== null) {
            if('form' === 'form' && is_array($failure_log)) {
                foreach($failure_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failureLog'] = $failure_log;
            }
        }
        // query params
        if ($success_log !== null) {
            if('form' === 'form' && is_array($success_log)) {
                foreach($success_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['successLog'] = $success_log;
            }
        }
        // query params
        if ($deletion_log !== null) {
            if('form' === 'form' && is_array($deletion_log)) {
                foreach($deletion_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deletionLog'] = $deletion_log;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricJobLogsCount
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricJobLogsCount($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        list($response) = $this->getHistoricJobLogsCountWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log);
        return $response;
    }

    /**
     * Operation getHistoricJobLogsCountWithHttpInfo
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricJobLogsCountWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        $request = $this->getHistoricJobLogsCountRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricJobLogsCountAsync
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsCountAsync($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        return $this->getHistoricJobLogsCountAsyncWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricJobLogsCountAsyncWithHttpInfo
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsCountAsyncWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->getHistoricJobLogsCountRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricJobLogsCount'
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricJobLogsCountRequest($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {

        $resourcePath = '/history/job-log/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($log_id !== null) {
            if('form' === 'form' && is_array($log_id)) {
                foreach($log_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logId'] = $log_id;
            }
        }
        // query params
        if ($job_id !== null) {
            if('form' === 'form' && is_array($job_id)) {
                foreach($job_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobId'] = $job_id;
            }
        }
        // query params
        if ($job_exception_message !== null) {
            if('form' === 'form' && is_array($job_exception_message)) {
                foreach($job_exception_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobExceptionMessage'] = $job_exception_message;
            }
        }
        // query params
        if ($job_definition_id !== null) {
            if('form' === 'form' && is_array($job_definition_id)) {
                foreach($job_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionId'] = $job_definition_id;
            }
        }
        // query params
        if ($job_definition_type !== null) {
            if('form' === 'form' && is_array($job_definition_type)) {
                foreach($job_definition_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionType'] = $job_definition_type;
            }
        }
        // query params
        if ($job_definition_configuration !== null) {
            if('form' === 'form' && is_array($job_definition_configuration)) {
                foreach($job_definition_configuration as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionConfiguration'] = $job_definition_configuration;
            }
        }
        // query params
        if ($activity_id_in !== null) {
            if('form' === 'form' && is_array($activity_id_in)) {
                foreach($activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityIdIn'] = $activity_id_in;
            }
        }
        // query params
        if ($failed_activity_id_in !== null) {
            if('form' === 'form' && is_array($failed_activity_id_in)) {
                foreach($failed_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failedActivityIdIn'] = $failed_activity_id_in;
            }
        }
        // query params
        if ($execution_id_in !== null) {
            if('form' === 'form' && is_array($execution_id_in)) {
                foreach($execution_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionIdIn'] = $execution_id_in;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($hostname !== null) {
            if('form' === 'form' && is_array($hostname)) {
                foreach($hostname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['hostname'] = $hostname;
            }
        }
        // query params
        if ($job_priority_lower_than_or_equals !== null) {
            if('form' === 'form' && is_array($job_priority_lower_than_or_equals)) {
                foreach($job_priority_lower_than_or_equals as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobPriorityLowerThanOrEquals'] = $job_priority_lower_than_or_equals;
            }
        }
        // query params
        if ($job_priority_higher_than_or_equals !== null) {
            if('form' === 'form' && is_array($job_priority_higher_than_or_equals)) {
                foreach($job_priority_higher_than_or_equals as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobPriorityHigherThanOrEquals'] = $job_priority_higher_than_or_equals;
            }
        }
        // query params
        if ($creation_log !== null) {
            if('form' === 'form' && is_array($creation_log)) {
                foreach($creation_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['creationLog'] = $creation_log;
            }
        }
        // query params
        if ($failure_log !== null) {
            if('form' === 'form' && is_array($failure_log)) {
                foreach($failure_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failureLog'] = $failure_log;
            }
        }
        // query params
        if ($success_log !== null) {
            if('form' === 'form' && is_array($success_log)) {
                foreach($success_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['successLog'] = $success_log;
            }
        }
        // query params
        if ($deletion_log !== null) {
            if('form' === 'form' && is_array($deletion_log)) {
                foreach($deletion_log as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deletionLog'] = $deletion_log;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStacktraceHistoricJobLog
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getStacktraceHistoricJobLog($id)
    {
        list($response) = $this->getStacktraceHistoricJobLogWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getStacktraceHistoricJobLogWithHttpInfo
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStacktraceHistoricJobLogWithHttpInfo($id)
    {
        $request = $this->getStacktraceHistoricJobLogRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStacktraceHistoricJobLogAsync
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStacktraceHistoricJobLogAsync($id)
    {
        return $this->getStacktraceHistoricJobLogAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStacktraceHistoricJobLogAsyncWithHttpInfo
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStacktraceHistoricJobLogAsyncWithHttpInfo($id)
    {
        $returnType = 'mixed';
        $request = $this->getStacktraceHistoricJobLogRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStacktraceHistoricJobLog'
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStacktraceHistoricJobLogRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStacktraceHistoricJobLog'
            );
        }

        $resourcePath = '/history/job-log/{id}/stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricJobLogs
     *
     * Get Job Logs (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto historic_job_log_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricJobLogDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryHistoricJobLogs($first_result = null, $max_results = null, $historic_job_log_query_dto = null)
    {
        list($response) = $this->queryHistoricJobLogsWithHttpInfo($first_result, $max_results, $historic_job_log_query_dto);
        return $response;
    }

    /**
     * Operation queryHistoricJobLogsWithHttpInfo
     *
     * Get Job Logs (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricJobLogDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricJobLogsWithHttpInfo($first_result = null, $max_results = null, $historic_job_log_query_dto = null)
    {
        $request = $this->queryHistoricJobLogsRequest($first_result, $max_results, $historic_job_log_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricJobLogDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricJobLogDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricJobLogDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricJobLogDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricJobLogsAsync
     *
     * Get Job Logs (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsAsync($first_result = null, $max_results = null, $historic_job_log_query_dto = null)
    {
        return $this->queryHistoricJobLogsAsyncWithHttpInfo($first_result, $max_results, $historic_job_log_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricJobLogsAsyncWithHttpInfo
     *
     * Get Job Logs (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsAsyncWithHttpInfo($first_result = null, $max_results = null, $historic_job_log_query_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricJobLogDto[]';
        $request = $this->queryHistoricJobLogsRequest($first_result, $max_results, $historic_job_log_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricJobLogs'
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryHistoricJobLogsRequest($first_result = null, $max_results = null, $historic_job_log_query_dto = null)
    {

        $resourcePath = '/history/job-log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historic_job_log_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historic_job_log_query_dto));
            } else {
                $httpBody = $historic_job_log_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricJobLogsCount
     *
     * Get Job Log Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto historic_job_log_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryHistoricJobLogsCount($historic_job_log_query_dto = null)
    {
        list($response) = $this->queryHistoricJobLogsCountWithHttpInfo($historic_job_log_query_dto);
        return $response;
    }

    /**
     * Operation queryHistoricJobLogsCountWithHttpInfo
     *
     * Get Job Log Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricJobLogsCountWithHttpInfo($historic_job_log_query_dto = null)
    {
        $request = $this->queryHistoricJobLogsCountRequest($historic_job_log_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricJobLogsCountAsync
     *
     * Get Job Log Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsCountAsync($historic_job_log_query_dto = null)
    {
        return $this->queryHistoricJobLogsCountAsyncWithHttpInfo($historic_job_log_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricJobLogsCountAsyncWithHttpInfo
     *
     * Get Job Log Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsCountAsyncWithHttpInfo($historic_job_log_query_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->queryHistoricJobLogsCountRequest($historic_job_log_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricJobLogsCount'
     *
     * @param  \OpenAPI\Client\Model\HistoricJobLogQueryDto $historic_job_log_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryHistoricJobLogsCountRequest($historic_job_log_query_dto = null)
    {

        $resourcePath = '/history/job-log/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historic_job_log_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historic_job_log_query_dto));
            } else {
                $httpBody = $historic_job_log_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
