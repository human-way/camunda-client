<?php
/**
 * DecisionRequirementsDefinitionApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DecisionRequirementsDefinitionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DecisionRequirementsDefinitionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDecisionRequirementsDefinitionById
     *
     * Get Decision Requirements Definition by ID
     *
     * @param  string $id The id of the decision requirements definition to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionById($id)
    {
        list($response) = $this->getDecisionRequirementsDefinitionByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionByIdWithHttpInfo
     *
     * Get Decision Requirements Definition by ID
     *
     * @param  string $id The id of the decision requirements definition to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionByIdWithHttpInfo($id)
    {
        $request = $this->getDecisionRequirementsDefinitionByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionByIdAsync
     *
     * Get Decision Requirements Definition by ID
     *
     * @param  string $id The id of the decision requirements definition to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionByIdAsync($id)
    {
        return $this->getDecisionRequirementsDefinitionByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionByIdAsyncWithHttpInfo
     *
     * Get Decision Requirements Definition by ID
     *
     * @param  string $id The id of the decision requirements definition to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto';
        $request = $this->getDecisionRequirementsDefinitionByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionById'
     *
     * @param  string $id The id of the decision requirements definition to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDecisionRequirementsDefinitionById'
            );
        }

        $resourcePath = '/decision-requirements-definition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKey
     *
     * Get Decision Requirements Definition by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionByKey($key)
    {
        list($response) = $this->getDecisionRequirementsDefinitionByKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKeyWithHttpInfo
     *
     * Get Decision Requirements Definition by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionByKeyWithHttpInfo($key)
    {
        $request = $this->getDecisionRequirementsDefinitionByKeyRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKeyAsync
     *
     * Get Decision Requirements Definition by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionByKeyAsync($key)
    {
        return $this->getDecisionRequirementsDefinitionByKeyAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKeyAsyncWithHttpInfo
     *
     * Get Decision Requirements Definition by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionByKeyAsyncWithHttpInfo($key)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto';
        $request = $this->getDecisionRequirementsDefinitionByKeyRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionByKey'
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionByKeyRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionRequirementsDefinitionByKey'
            );
        }

        $resourcePath = '/decision-requirements-definition/key/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKeyAndTenantId
     *
     * Get Decision Requirements Definition by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionByKeyAndTenantId($key, $tenant_id)
    {
        list($response) = $this->getDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfo($key, $tenant_id);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfo
     *
     * Get Decision Requirements Definition by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfo($key, $tenant_id)
    {
        $request = $this->getDecisionRequirementsDefinitionByKeyAndTenantIdRequest($key, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKeyAndTenantIdAsync
     *
     * Get Decision Requirements Definition by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionByKeyAndTenantIdAsync($key, $tenant_id)
    {
        return $this->getDecisionRequirementsDefinitionByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionByKeyAndTenantIdAsyncWithHttpInfo
     *
     * Get Decision Requirements Definition by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto';
        $request = $this->getDecisionRequirementsDefinitionByKeyAndTenantIdRequest($key, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionByKeyAndTenantId'
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionByKeyAndTenantIdRequest($key, $tenant_id)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionRequirementsDefinitionByKeyAndTenantId'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDecisionRequirementsDefinitionByKeyAndTenantId'
            );
        }

        $resourcePath = '/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramById
     *
     * Get Decision Requirements Diagram by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionDiagramById($id)
    {
        list($response) = $this->getDecisionRequirementsDefinitionDiagramByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByIdWithHttpInfo
     *
     * Get Decision Requirements Diagram by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionDiagramByIdWithHttpInfo($id)
    {
        $request = $this->getDecisionRequirementsDefinitionDiagramByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByIdAsync
     *
     * Get Decision Requirements Diagram by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDiagramByIdAsync($id)
    {
        return $this->getDecisionRequirementsDefinitionDiagramByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByIdAsyncWithHttpInfo
     *
     * Get Decision Requirements Diagram by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDiagramByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\SplFileObject';
        $request = $this->getDecisionRequirementsDefinitionDiagramByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionDiagramById'
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionDiagramByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDecisionRequirementsDefinitionDiagramById'
            );
        }

        $resourcePath = '/decision-requirements-definition/{id}/diagram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['image/_*', 'application/octet-stream', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['image/_*', 'application/octet-stream', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKey
     *
     * Get Decision Requirements Diagram by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionDiagramByKey($key)
    {
        list($response) = $this->getDecisionRequirementsDefinitionDiagramByKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKeyWithHttpInfo
     *
     * Get Decision Requirements Diagram by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyWithHttpInfo($key)
    {
        $request = $this->getDecisionRequirementsDefinitionDiagramByKeyRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKeyAsync
     *
     * Get Decision Requirements Diagram by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyAsync($key)
    {
        return $this->getDecisionRequirementsDefinitionDiagramByKeyAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKeyAsyncWithHttpInfo
     *
     * Get Decision Requirements Diagram by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyAsyncWithHttpInfo($key)
    {
        $returnType = '\SplFileObject';
        $request = $this->getDecisionRequirementsDefinitionDiagramByKeyRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionDiagramByKey'
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionRequirementsDefinitionDiagramByKey'
            );
        }

        $resourcePath = '/decision-requirements-definition/key/{key}/diagram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['image/_*', 'application/octet-stream', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['image/_*', 'application/octet-stream', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKeyAndTenantId
     *
     * Get Decision Requirements Diagram by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyAndTenantId($key, $tenant_id)
    {
        list($response) = $this->getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfo($key, $tenant_id);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfo
     *
     * Get Decision Requirements Diagram by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfo($key, $tenant_id)
    {
        $request = $this->getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdRequest($key, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdAsync
     *
     * Get Decision Requirements Diagram by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdAsync($key, $tenant_id)
    {
        return $this->getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdAsyncWithHttpInfo
     *
     * Get Decision Requirements Diagram by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
    {
        $returnType = '\SplFileObject';
        $request = $this->getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdRequest($key, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionDiagramByKeyAndTenantId'
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionDiagramByKeyAndTenantIdRequest($key, $tenant_id)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionRequirementsDefinitionDiagramByKeyAndTenantId'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDecisionRequirementsDefinitionDiagramByKeyAndTenantId'
            );
        }

        $resourcePath = '/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['image/_*', 'application/octet-stream', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['image/_*', 'application/octet-stream', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlById
     *
     * Get DMN XML by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionDmnXmlById($id)
    {
        list($response) = $this->getDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfo
     *
     * Get DMN XML by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfo($id)
    {
        $request = $this->getDecisionRequirementsDefinitionDmnXmlByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByIdAsync
     *
     * Get DMN XML by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDmnXmlByIdAsync($id)
    {
        return $this->getDecisionRequirementsDefinitionDmnXmlByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByIdAsyncWithHttpInfo
     *
     * Get DMN XML by ID
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDmnXmlByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto';
        $request = $this->getDecisionRequirementsDefinitionDmnXmlByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionDmnXmlById'
     *
     * @param  string $id The id of the decision requirements definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionDmnXmlByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDecisionRequirementsDefinitionDmnXmlById'
            );
        }

        $resourcePath = '/decision-requirements-definition/{id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKey
     *
     * Get DMN XML by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKey($key)
    {
        list($response) = $this->getDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfo
     *
     * Get DMN XML by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfo($key)
    {
        $request = $this->getDecisionRequirementsDefinitionDmnXmlByKeyRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKeyAsync
     *
     * Get DMN XML by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyAsync($key)
    {
        return $this->getDecisionRequirementsDefinitionDmnXmlByKeyAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKeyAsyncWithHttpInfo
     *
     * Get DMN XML by Key
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyAsyncWithHttpInfo($key)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto';
        $request = $this->getDecisionRequirementsDefinitionDmnXmlByKeyRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionDmnXmlByKey'
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionRequirementsDefinitionDmnXmlByKey'
            );
        }

        $resourcePath = '/decision-requirements-definition/key/{key}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId
     *
     * Get DMN XML by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId($key, $tenant_id)
    {
        list($response) = $this->getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfo($key, $tenant_id);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfo
     *
     * Get DMN XML by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfo($key, $tenant_id)
    {
        $request = $this->getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdRequest($key, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdAsync
     *
     * Get DMN XML by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdAsync($key, $tenant_id)
    {
        return $this->getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdAsyncWithHttpInfo
     *
     * Get DMN XML by Key and Tenant ID
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionXmlDto';
        $request = $this->getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdRequest($key, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId'
     *
     * @param  string $key The key of the decision requirements definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant to which the decision requirements definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdRequest($key, $tenant_id)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId'
            );
        }

        $resourcePath = '/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitions
     *
     * Get Decision Requirements Definitions
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitions($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->getDecisionRequirementsDefinitionsWithHttpInfo($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionsWithHttpInfo
     *
     * Get Decision Requirements Definitions
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionRequirementsDefinitionDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionsWithHttpInfo($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $request = $this->getDecisionRequirementsDefinitionsRequest($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionsAsync
     *
     * Get Decision Requirements Definitions
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionsAsync($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        return $this->getDecisionRequirementsDefinitionsAsyncWithHttpInfo($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionsAsyncWithHttpInfo
     *
     * Get Decision Requirements Definitions
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionsAsyncWithHttpInfo($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionRequirementsDefinitionDto[]';
        $request = $this->getDecisionRequirementsDefinitionsRequest($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitions'
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionsRequest($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/decision-requirements-definition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($decision_requirements_definition_id !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id)) {
                foreach($decision_requirements_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionId'] = $decision_requirements_definition_id;
            }
        }
        // query params
        if ($decision_requirements_definition_id_in !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id_in)) {
                foreach($decision_requirements_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionIdIn'] = $decision_requirements_definition_id_in;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($name_like !== null) {
            if('form' === 'form' && is_array($name_like)) {
                foreach($name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nameLike'] = $name_like;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($key !== null) {
            if('form' === 'form' && is_array($key)) {
                foreach($key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['key'] = $key;
            }
        }
        // query params
        if ($key_like !== null) {
            if('form' === 'form' && is_array($key_like)) {
                foreach($key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyLike'] = $key_like;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($category_like !== null) {
            if('form' === 'form' && is_array($category_like)) {
                foreach($category_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['categoryLike'] = $category_like;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($latest_version !== null) {
            if('form' === 'form' && is_array($latest_version)) {
                foreach($latest_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['latestVersion'] = $latest_version;
            }
        }
        // query params
        if ($resource_name !== null) {
            if('form' === 'form' && is_array($resource_name)) {
                foreach($resource_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceName'] = $resource_name;
            }
        }
        // query params
        if ($resource_name_like !== null) {
            if('form' === 'form' && is_array($resource_name_like)) {
                foreach($resource_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceNameLike'] = $resource_name_like;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($include_decision_requirements_definitions_without_tenant_id !== null) {
            if('form' === 'form' && is_array($include_decision_requirements_definitions_without_tenant_id)) {
                foreach($include_decision_requirements_definitions_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeDecisionRequirementsDefinitionsWithoutTenantId'] = $include_decision_requirements_definitions_without_tenant_id;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionRequirementsDefinitionsCount
     *
     * Get Decision Requirements Definition Count
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionRequirementsDefinitionsCount($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null)
    {
        list($response) = $this->getDecisionRequirementsDefinitionsCountWithHttpInfo($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id);
        return $response;
    }

    /**
     * Operation getDecisionRequirementsDefinitionsCountWithHttpInfo
     *
     * Get Decision Requirements Definition Count
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionRequirementsDefinitionsCountWithHttpInfo($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null)
    {
        $request = $this->getDecisionRequirementsDefinitionsCountRequest($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionRequirementsDefinitionsCountAsync
     *
     * Get Decision Requirements Definition Count
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionsCountAsync($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null)
    {
        return $this->getDecisionRequirementsDefinitionsCountAsyncWithHttpInfo($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionRequirementsDefinitionsCountAsyncWithHttpInfo
     *
     * Get Decision Requirements Definition Count
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionRequirementsDefinitionsCountAsyncWithHttpInfo($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->getDecisionRequirementsDefinitionsCountRequest($decision_requirements_definition_id, $decision_requirements_definition_id_in, $name, $name_like, $deployment_id, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $tenant_id_in, $without_tenant_id, $include_decision_requirements_definitions_without_tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionRequirementsDefinitionsCount'
     *
     * @param  string $decision_requirements_definition_id Filter by decision requirements definition id. (optional)
     * @param  string $decision_requirements_definition_id_in Filter by decision requirements definition ids. (optional)
     * @param  string $name Filter by decision requirements definition name. (optional)
     * @param  string $name_like Filter by decision requirements definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the id of the deployment a decision requirement definition belongs to. (optional)
     * @param  string $key Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision requirements definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision requirements definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision requirements definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision requirements definition version. (optional)
     * @param  bool $latest_version Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision requirements definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_requirements_definitions_without_tenant_id Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionRequirementsDefinitionsCountRequest($decision_requirements_definition_id = null, $decision_requirements_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_requirements_definitions_without_tenant_id = null)
    {

        $resourcePath = '/decision-requirements-definition/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($decision_requirements_definition_id !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id)) {
                foreach($decision_requirements_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionId'] = $decision_requirements_definition_id;
            }
        }
        // query params
        if ($decision_requirements_definition_id_in !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id_in)) {
                foreach($decision_requirements_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionIdIn'] = $decision_requirements_definition_id_in;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($name_like !== null) {
            if('form' === 'form' && is_array($name_like)) {
                foreach($name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nameLike'] = $name_like;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($key !== null) {
            if('form' === 'form' && is_array($key)) {
                foreach($key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['key'] = $key;
            }
        }
        // query params
        if ($key_like !== null) {
            if('form' === 'form' && is_array($key_like)) {
                foreach($key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyLike'] = $key_like;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($category_like !== null) {
            if('form' === 'form' && is_array($category_like)) {
                foreach($category_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['categoryLike'] = $category_like;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($latest_version !== null) {
            if('form' === 'form' && is_array($latest_version)) {
                foreach($latest_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['latestVersion'] = $latest_version;
            }
        }
        // query params
        if ($resource_name !== null) {
            if('form' === 'form' && is_array($resource_name)) {
                foreach($resource_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceName'] = $resource_name;
            }
        }
        // query params
        if ($resource_name_like !== null) {
            if('form' === 'form' && is_array($resource_name_like)) {
                foreach($resource_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceNameLike'] = $resource_name_like;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($include_decision_requirements_definitions_without_tenant_id !== null) {
            if('form' === 'form' && is_array($include_decision_requirements_definitions_without_tenant_id)) {
                foreach($include_decision_requirements_definitions_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeDecisionRequirementsDefinitionsWithoutTenantId'] = $include_decision_requirements_definitions_without_tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
