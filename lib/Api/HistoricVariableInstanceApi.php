<?php
/**
 * HistoricVariableInstanceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HistoricVariableInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HistoricVariableInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteHistoricVariableInstance
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHistoricVariableInstance($id)
    {
        $this->deleteHistoricVariableInstanceWithHttpInfo($id);
    }

    /**
     * Operation deleteHistoricVariableInstanceWithHttpInfo
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricVariableInstanceWithHttpInfo($id)
    {
        $request = $this->deleteHistoricVariableInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricVariableInstanceAsync
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstanceAsync($id)
    {
        return $this->deleteHistoricVariableInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricVariableInstanceAsyncWithHttpInfo
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHistoricVariableInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricVariableInstance'
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteHistoricVariableInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHistoricVariableInstance'
            );
        }

        $resourcePath = '/history/variable-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstance
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricVariableInstanceDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricVariableInstance($id, $deserialize_values = null)
    {
        list($response) = $this->getHistoricVariableInstanceWithHttpInfo($id, $deserialize_values);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstanceWithHttpInfo
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricVariableInstanceDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstanceWithHttpInfo($id, $deserialize_values = null)
    {
        $request = $this->getHistoricVariableInstanceRequest($id, $deserialize_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricVariableInstanceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricVariableInstanceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricVariableInstanceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricVariableInstanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstanceAsync
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceAsync($id, $deserialize_values = null)
    {
        return $this->getHistoricVariableInstanceAsyncWithHttpInfo($id, $deserialize_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstanceAsyncWithHttpInfo
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceAsyncWithHttpInfo($id, $deserialize_values = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricVariableInstanceDto';
        $request = $this->getHistoricVariableInstanceRequest($id, $deserialize_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstance'
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricVariableInstanceRequest($id, $deserialize_values = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricVariableInstance'
            );
        }

        $resourcePath = '/history/variable-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deserialize_values !== null) {
            if('form' === 'form' && is_array($deserialize_values)) {
                foreach($deserialize_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValues'] = $deserialize_values;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstanceBinary
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricVariableInstanceBinary($id)
    {
        list($response) = $this->getHistoricVariableInstanceBinaryWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstanceBinaryWithHttpInfo
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstanceBinaryWithHttpInfo($id)
    {
        $request = $this->getHistoricVariableInstanceBinaryRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstanceBinaryAsync
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceBinaryAsync($id)
    {
        return $this->getHistoricVariableInstanceBinaryAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstanceBinaryAsyncWithHttpInfo
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceBinaryAsyncWithHttpInfo($id)
    {
        $returnType = '\SplFileObject';
        $request = $this->getHistoricVariableInstanceBinaryRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstanceBinary'
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricVariableInstanceBinaryRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricVariableInstanceBinary'
            );
        }

        $resourcePath = '/history/variable-instance/{id}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstances
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricVariableInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricVariableInstances($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        list($response) = $this->getHistoricVariableInstancesWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstancesWithHttpInfo
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricVariableInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstancesWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $request = $this->getHistoricVariableInstancesRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricVariableInstanceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstancesAsync
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesAsync($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        return $this->getHistoricVariableInstancesAsyncWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstancesAsyncWithHttpInfo
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesAsyncWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]';
        $request = $this->getHistoricVariableInstancesRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstances'
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricVariableInstancesRequest($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {

        $resourcePath = '/history/variable-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($variable_name !== null) {
            if('form' === 'form' && is_array($variable_name)) {
                foreach($variable_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableName'] = $variable_name;
            }
        }
        // query params
        if ($variable_name_like !== null) {
            if('form' === 'form' && is_array($variable_name_like)) {
                foreach($variable_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNameLike'] = $variable_name_like;
            }
        }
        // query params
        if ($variable_value !== null) {
            if('form' === 'form' && is_array($variable_value)) {
                foreach($variable_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValue'] = $variable_value;
            }
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_names_ignore_case)) {
                foreach($variable_names_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNamesIgnoreCase'] = $variable_names_ignore_case;
            }
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_values_ignore_case)) {
                foreach($variable_values_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValuesIgnoreCase'] = $variable_values_ignore_case;
            }
        }
        // query params
        if ($variable_type_in !== null) {
            if('form' === 'form' && is_array($variable_type_in)) {
                foreach($variable_type_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableTypeIn'] = $variable_type_in;
            }
        }
        // query params
        if ($include_deleted !== null) {
            if('form' === 'form' && is_array($include_deleted)) {
                foreach($include_deleted as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeDeleted'] = $include_deleted;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_instance_id_in !== null) {
            if('form' === 'form' && is_array($process_instance_id_in)) {
                foreach($process_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIdIn'] = $process_instance_id_in;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($execution_id_in !== null) {
            if('form' === 'form' && is_array($execution_id_in)) {
                foreach($execution_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionIdIn'] = $execution_id_in;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($case_execution_id_in !== null) {
            if('form' === 'form' && is_array($case_execution_id_in)) {
                foreach($case_execution_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseExecutionIdIn'] = $case_execution_id_in;
            }
        }
        // query params
        if ($case_activity_id_in !== null) {
            if('form' === 'form' && is_array($case_activity_id_in)) {
                foreach($case_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseActivityIdIn'] = $case_activity_id_in;
            }
        }
        // query params
        if ($task_id_in !== null) {
            if('form' === 'form' && is_array($task_id_in)) {
                foreach($task_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['taskIdIn'] = $task_id_in;
            }
        }
        // query params
        if ($activity_instance_id_in !== null) {
            if('form' === 'form' && is_array($activity_instance_id_in)) {
                foreach($activity_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityInstanceIdIn'] = $activity_instance_id_in;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }
        // query params
        if ($deserialize_values !== null) {
            if('form' === 'form' && is_array($deserialize_values)) {
                foreach($deserialize_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValues'] = $deserialize_values;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstancesCount
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricVariableInstancesCount($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null)
    {
        list($response) = $this->getHistoricVariableInstancesCountWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstancesCountWithHttpInfo
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstancesCountWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null)
    {
        $request = $this->getHistoricVariableInstancesCountRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstancesCountAsync
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesCountAsync($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null)
    {
        return $this->getHistoricVariableInstancesCountAsyncWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstancesCountAsyncWithHttpInfo
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesCountAsyncWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->getHistoricVariableInstancesCountRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstancesCount'
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#39;serializable&#39;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricVariableInstancesCountRequest($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null)
    {

        $resourcePath = '/history/variable-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($variable_name !== null) {
            if('form' === 'form' && is_array($variable_name)) {
                foreach($variable_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableName'] = $variable_name;
            }
        }
        // query params
        if ($variable_name_like !== null) {
            if('form' === 'form' && is_array($variable_name_like)) {
                foreach($variable_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNameLike'] = $variable_name_like;
            }
        }
        // query params
        if ($variable_value !== null) {
            if('form' === 'form' && is_array($variable_value)) {
                foreach($variable_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValue'] = $variable_value;
            }
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_names_ignore_case)) {
                foreach($variable_names_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNamesIgnoreCase'] = $variable_names_ignore_case;
            }
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_values_ignore_case)) {
                foreach($variable_values_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValuesIgnoreCase'] = $variable_values_ignore_case;
            }
        }
        // query params
        if ($variable_type_in !== null) {
            if('form' === 'form' && is_array($variable_type_in)) {
                foreach($variable_type_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableTypeIn'] = $variable_type_in;
            }
        }
        // query params
        if ($include_deleted !== null) {
            if('form' === 'form' && is_array($include_deleted)) {
                foreach($include_deleted as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeDeleted'] = $include_deleted;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_instance_id_in !== null) {
            if('form' === 'form' && is_array($process_instance_id_in)) {
                foreach($process_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIdIn'] = $process_instance_id_in;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($execution_id_in !== null) {
            if('form' === 'form' && is_array($execution_id_in)) {
                foreach($execution_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionIdIn'] = $execution_id_in;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($case_execution_id_in !== null) {
            if('form' === 'form' && is_array($case_execution_id_in)) {
                foreach($case_execution_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseExecutionIdIn'] = $case_execution_id_in;
            }
        }
        // query params
        if ($case_activity_id_in !== null) {
            if('form' === 'form' && is_array($case_activity_id_in)) {
                foreach($case_activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseActivityIdIn'] = $case_activity_id_in;
            }
        }
        // query params
        if ($task_id_in !== null) {
            if('form' === 'form' && is_array($task_id_in)) {
                foreach($task_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['taskIdIn'] = $task_id_in;
            }
        }
        // query params
        if ($activity_instance_id_in !== null) {
            if('form' === 'form' && is_array($activity_instance_id_in)) {
                foreach($activity_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityInstanceIdIn'] = $activity_instance_id_in;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricVariableInstances
     *
     * Get Variable Instances (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto historic_variable_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricVariableInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryHistoricVariableInstances($first_result = null, $max_results = null, $deserialize_values = null, $historic_variable_instance_query_dto = null)
    {
        list($response) = $this->queryHistoricVariableInstancesWithHttpInfo($first_result, $max_results, $deserialize_values, $historic_variable_instance_query_dto);
        return $response;
    }

    /**
     * Operation queryHistoricVariableInstancesWithHttpInfo
     *
     * Get Variable Instances (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricVariableInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricVariableInstancesWithHttpInfo($first_result = null, $max_results = null, $deserialize_values = null, $historic_variable_instance_query_dto = null)
    {
        $request = $this->queryHistoricVariableInstancesRequest($first_result, $max_results, $deserialize_values, $historic_variable_instance_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricVariableInstanceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricVariableInstancesAsync
     *
     * Get Variable Instances (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesAsync($first_result = null, $max_results = null, $deserialize_values = null, $historic_variable_instance_query_dto = null)
    {
        return $this->queryHistoricVariableInstancesAsyncWithHttpInfo($first_result, $max_results, $deserialize_values, $historic_variable_instance_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricVariableInstancesAsyncWithHttpInfo
     *
     * Get Variable Instances (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesAsyncWithHttpInfo($first_result = null, $max_results = null, $deserialize_values = null, $historic_variable_instance_query_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricVariableInstanceDto[]';
        $request = $this->queryHistoricVariableInstancesRequest($first_result, $max_results, $deserialize_values, $historic_variable_instance_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricVariableInstances'
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryHistoricVariableInstancesRequest($first_result = null, $max_results = null, $deserialize_values = null, $historic_variable_instance_query_dto = null)
    {

        $resourcePath = '/history/variable-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }
        // query params
        if ($deserialize_values !== null) {
            if('form' === 'form' && is_array($deserialize_values)) {
                foreach($deserialize_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValues'] = $deserialize_values;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historic_variable_instance_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historic_variable_instance_query_dto));
            } else {
                $httpBody = $historic_variable_instance_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricVariableInstancesCount
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto historic_variable_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryHistoricVariableInstancesCount($historic_variable_instance_query_dto = null)
    {
        list($response) = $this->queryHistoricVariableInstancesCountWithHttpInfo($historic_variable_instance_query_dto);
        return $response;
    }

    /**
     * Operation queryHistoricVariableInstancesCountWithHttpInfo
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricVariableInstancesCountWithHttpInfo($historic_variable_instance_query_dto = null)
    {
        $request = $this->queryHistoricVariableInstancesCountRequest($historic_variable_instance_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricVariableInstancesCountAsync
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesCountAsync($historic_variable_instance_query_dto = null)
    {
        return $this->queryHistoricVariableInstancesCountAsyncWithHttpInfo($historic_variable_instance_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricVariableInstancesCountAsyncWithHttpInfo
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesCountAsyncWithHttpInfo($historic_variable_instance_query_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->queryHistoricVariableInstancesCountRequest($historic_variable_instance_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricVariableInstancesCount'
     *
     * @param  \OpenAPI\Client\Model\HistoricVariableInstanceQueryDto $historic_variable_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryHistoricVariableInstancesCountRequest($historic_variable_instance_query_dto = null)
    {

        $resourcePath = '/history/variable-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historic_variable_instance_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historic_variable_instance_query_dto));
            } else {
                $httpBody = $historic_variable_instance_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
