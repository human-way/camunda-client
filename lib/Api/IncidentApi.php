<?php
/**
 * IncidentApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IncidentApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IncidentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation clearIncidentAnnotation
     *
     * Clear Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearIncidentAnnotation($id)
    {
        $this->clearIncidentAnnotationWithHttpInfo($id);
    }

    /**
     * Operation clearIncidentAnnotationWithHttpInfo
     *
     * Clear Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearIncidentAnnotationWithHttpInfo($id)
    {
        $request = $this->clearIncidentAnnotationRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearIncidentAnnotationAsync
     *
     * Clear Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearIncidentAnnotationAsync($id)
    {
        return $this->clearIncidentAnnotationAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearIncidentAnnotationAsyncWithHttpInfo
     *
     * Clear Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearIncidentAnnotationAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->clearIncidentAnnotationRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearIncidentAnnotation'
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clearIncidentAnnotationRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling clearIncidentAnnotation'
            );
        }

        $resourcePath = '/incident/{id}/annotation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIncident
     *
     * Get Incident
     *
     * @param  string $id The id of the incident to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IncidentDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getIncident($id)
    {
        list($response) = $this->getIncidentWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getIncidentWithHttpInfo
     *
     * Get Incident
     *
     * @param  string $id The id of the incident to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IncidentDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIncidentWithHttpInfo($id)
    {
        $request = $this->getIncidentRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IncidentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IncidentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IncidentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IncidentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIncidentAsync
     *
     * Get Incident
     *
     * @param  string $id The id of the incident to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncidentAsync($id)
    {
        return $this->getIncidentAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIncidentAsyncWithHttpInfo
     *
     * Get Incident
     *
     * @param  string $id The id of the incident to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncidentAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\IncidentDto';
        $request = $this->getIncidentRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIncident'
     *
     * @param  string $id The id of the incident to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIncidentRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIncident'
            );
        }

        $resourcePath = '/incident/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIncidents
     *
     * Get List
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IncidentDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getIncidents($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null, $sort_by = null, $sort_order = null)
    {
        list($response) = $this->getIncidentsWithHttpInfo($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in, $sort_by, $sort_order);
        return $response;
    }

    /**
     * Operation getIncidentsWithHttpInfo
     *
     * Get List
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IncidentDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIncidentsWithHttpInfo($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null, $sort_by = null, $sort_order = null)
    {
        $request = $this->getIncidentsRequest($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in, $sort_by, $sort_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\IncidentDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\IncidentDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\IncidentDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\IncidentDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIncidentsAsync
     *
     * Get List
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncidentsAsync($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null, $sort_by = null, $sort_order = null)
    {
        return $this->getIncidentsAsyncWithHttpInfo($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in, $sort_by, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIncidentsAsyncWithHttpInfo
     *
     * Get List
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncidentsAsyncWithHttpInfo($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null, $sort_by = null, $sort_order = null)
    {
        $returnType = '\OpenAPI\Client\Model\IncidentDto[]';
        $request = $this->getIncidentsRequest($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in, $sort_by, $sort_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIncidents'
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIncidentsRequest($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null, $sort_by = null, $sort_order = null)
    {

        $resourcePath = '/incident';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($incident_id !== null) {
            if('form' === 'form' && is_array($incident_id)) {
                foreach($incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentId'] = $incident_id;
            }
        }
        // query params
        if ($incident_type !== null) {
            if('form' === 'form' && is_array($incident_type)) {
                foreach($incident_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentType'] = $incident_type;
            }
        }
        // query params
        if ($incident_message !== null) {
            if('form' === 'form' && is_array($incident_message)) {
                foreach($incident_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessage'] = $incident_message;
            }
        }
        // query params
        if ($incident_message_like !== null) {
            if('form' === 'form' && is_array($incident_message_like)) {
                foreach($incident_message_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessageLike'] = $incident_message_like;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_in)) {
                foreach($process_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyIn'] = $process_definition_key_in;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($incident_timestamp_before !== null) {
            if('form' === 'form' && is_array($incident_timestamp_before)) {
                foreach($incident_timestamp_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentTimestampBefore'] = $incident_timestamp_before;
            }
        }
        // query params
        if ($incident_timestamp_after !== null) {
            if('form' === 'form' && is_array($incident_timestamp_after)) {
                foreach($incident_timestamp_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentTimestampAfter'] = $incident_timestamp_after;
            }
        }
        // query params
        if ($activity_id !== null) {
            if('form' === 'form' && is_array($activity_id)) {
                foreach($activity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityId'] = $activity_id;
            }
        }
        // query params
        if ($failed_activity_id !== null) {
            if('form' === 'form' && is_array($failed_activity_id)) {
                foreach($failed_activity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failedActivityId'] = $failed_activity_id;
            }
        }
        // query params
        if ($cause_incident_id !== null) {
            if('form' === 'form' && is_array($cause_incident_id)) {
                foreach($cause_incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['causeIncidentId'] = $cause_incident_id;
            }
        }
        // query params
        if ($root_cause_incident_id !== null) {
            if('form' === 'form' && is_array($root_cause_incident_id)) {
                foreach($root_cause_incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootCauseIncidentId'] = $root_cause_incident_id;
            }
        }
        // query params
        if ($configuration !== null) {
            if('form' === 'form' && is_array($configuration)) {
                foreach($configuration as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['configuration'] = $configuration;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($job_definition_id_in !== null) {
            if('form' === 'form' && is_array($job_definition_id_in)) {
                foreach($job_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionIdIn'] = $job_definition_id_in;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIncidentsCount
     *
     * Get List Count
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getIncidentsCount($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null)
    {
        list($response) = $this->getIncidentsCountWithHttpInfo($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in);
        return $response;
    }

    /**
     * Operation getIncidentsCountWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIncidentsCountWithHttpInfo($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null)
    {
        $request = $this->getIncidentsCountRequest($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIncidentsCountAsync
     *
     * Get List Count
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncidentsCountAsync($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null)
    {
        return $this->getIncidentsCountAsyncWithHttpInfo($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIncidentsCountAsyncWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIncidentsCountAsyncWithHttpInfo($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto[]';
        $request = $this->getIncidentsCountRequest($incident_id, $incident_type, $incident_message, $incident_message_like, $process_definition_id, $process_definition_key_in, $process_instance_id, $execution_id, $incident_timestamp_before, $incident_timestamp_after, $activity_id, $failed_activity_id, $cause_incident_id, $root_cause_incident_id, $configuration, $tenant_id_in, $job_definition_id_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIncidentsCount'
     *
     * @param  string $incident_id Restricts to incidents that have the given id. (optional)
     * @param  string $incident_type Restricts to incidents that belong to the given incident type. See the [User Guide](https://docs.camunda.org/manual/latest/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Restricts to incidents that have the given incident message. (optional)
     * @param  string $incident_message_like Restricts to incidents that incidents message is a substring of the given value. The string can include the wildcard character &#39;%&#39; to express like-strategy: starts with (&#x60;string%&#x60;), ends with (&#x60;%string&#x60;) or contains (&#x60;%string%&#x60;). (optional)
     * @param  string $process_definition_id Restricts to incidents that belong to a process definition with the given id. (optional)
     * @param  string $process_definition_key_in Restricts to incidents that belong to a process definition with the given keys. Must be a comma-separated list. (optional)
     * @param  string $process_instance_id Restricts to incidents that belong to a process instance with the given id. (optional)
     * @param  string $execution_id Restricts to incidents that belong to an execution with the given id. (optional)
     * @param  \DateTime $incident_timestamp_before Restricts to incidents that have an incidentTimestamp date before the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $incident_timestamp_after Restricts to incidents that have an incidentTimestamp date after the given date.  By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $activity_id Restricts to incidents that belong to an activity with the given id. (optional)
     * @param  string $failed_activity_id Restricts to incidents that were created due to the failure of an activity with the given id. (optional)
     * @param  string $cause_incident_id Restricts to incidents that have the given incident id as cause incident. (optional)
     * @param  string $root_cause_incident_id Restricts to incidents that have the given incident id as root cause incident. (optional)
     * @param  string $configuration Restricts to incidents that have the given parameter set as configuration. (optional)
     * @param  string $tenant_id_in Restricts to incidents that have one of the given comma-separated tenant ids. (optional)
     * @param  string $job_definition_id_in Restricts to incidents that have one of the given comma-separated job definition ids. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIncidentsCountRequest($incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $process_definition_id = null, $process_definition_key_in = null, $process_instance_id = null, $execution_id = null, $incident_timestamp_before = null, $incident_timestamp_after = null, $activity_id = null, $failed_activity_id = null, $cause_incident_id = null, $root_cause_incident_id = null, $configuration = null, $tenant_id_in = null, $job_definition_id_in = null)
    {

        $resourcePath = '/incident/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($incident_id !== null) {
            if('form' === 'form' && is_array($incident_id)) {
                foreach($incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentId'] = $incident_id;
            }
        }
        // query params
        if ($incident_type !== null) {
            if('form' === 'form' && is_array($incident_type)) {
                foreach($incident_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentType'] = $incident_type;
            }
        }
        // query params
        if ($incident_message !== null) {
            if('form' === 'form' && is_array($incident_message)) {
                foreach($incident_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessage'] = $incident_message;
            }
        }
        // query params
        if ($incident_message_like !== null) {
            if('form' === 'form' && is_array($incident_message_like)) {
                foreach($incident_message_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessageLike'] = $incident_message_like;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_in)) {
                foreach($process_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyIn'] = $process_definition_key_in;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($incident_timestamp_before !== null) {
            if('form' === 'form' && is_array($incident_timestamp_before)) {
                foreach($incident_timestamp_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentTimestampBefore'] = $incident_timestamp_before;
            }
        }
        // query params
        if ($incident_timestamp_after !== null) {
            if('form' === 'form' && is_array($incident_timestamp_after)) {
                foreach($incident_timestamp_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentTimestampAfter'] = $incident_timestamp_after;
            }
        }
        // query params
        if ($activity_id !== null) {
            if('form' === 'form' && is_array($activity_id)) {
                foreach($activity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityId'] = $activity_id;
            }
        }
        // query params
        if ($failed_activity_id !== null) {
            if('form' === 'form' && is_array($failed_activity_id)) {
                foreach($failed_activity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failedActivityId'] = $failed_activity_id;
            }
        }
        // query params
        if ($cause_incident_id !== null) {
            if('form' === 'form' && is_array($cause_incident_id)) {
                foreach($cause_incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['causeIncidentId'] = $cause_incident_id;
            }
        }
        // query params
        if ($root_cause_incident_id !== null) {
            if('form' === 'form' && is_array($root_cause_incident_id)) {
                foreach($root_cause_incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootCauseIncidentId'] = $root_cause_incident_id;
            }
        }
        // query params
        if ($configuration !== null) {
            if('form' === 'form' && is_array($configuration)) {
                foreach($configuration as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['configuration'] = $configuration;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($job_definition_id_in !== null) {
            if('form' === 'form' && is_array($job_definition_id_in)) {
                foreach($job_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['jobDefinitionIdIn'] = $job_definition_id_in;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resolveIncident
     *
     * Resolve Incident
     *
     * @param  string $id The id of the incident to be resolved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resolveIncident($id)
    {
        $this->resolveIncidentWithHttpInfo($id);
    }

    /**
     * Operation resolveIncidentWithHttpInfo
     *
     * Resolve Incident
     *
     * @param  string $id The id of the incident to be resolved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resolveIncidentWithHttpInfo($id)
    {
        $request = $this->resolveIncidentRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resolveIncidentAsync
     *
     * Resolve Incident
     *
     * @param  string $id The id of the incident to be resolved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resolveIncidentAsync($id)
    {
        return $this->resolveIncidentAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resolveIncidentAsyncWithHttpInfo
     *
     * Resolve Incident
     *
     * @param  string $id The id of the incident to be resolved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resolveIncidentAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->resolveIncidentRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resolveIncident'
     *
     * @param  string $id The id of the incident to be resolved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resolveIncidentRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling resolveIncident'
            );
        }

        $resourcePath = '/incident/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setIncidentAnnotation
     *
     * Set Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto annotation_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setIncidentAnnotation($id, $annotation_dto = null)
    {
        $this->setIncidentAnnotationWithHttpInfo($id, $annotation_dto);
    }

    /**
     * Operation setIncidentAnnotationWithHttpInfo
     *
     * Set Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setIncidentAnnotationWithHttpInfo($id, $annotation_dto = null)
    {
        $request = $this->setIncidentAnnotationRequest($id, $annotation_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setIncidentAnnotationAsync
     *
     * Set Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setIncidentAnnotationAsync($id, $annotation_dto = null)
    {
        return $this->setIncidentAnnotationAsyncWithHttpInfo($id, $annotation_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setIncidentAnnotationAsyncWithHttpInfo
     *
     * Set Incident Annotation
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setIncidentAnnotationAsyncWithHttpInfo($id, $annotation_dto = null)
    {
        $returnType = '';
        $request = $this->setIncidentAnnotationRequest($id, $annotation_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setIncidentAnnotation'
     *
     * @param  string $id The id of the incident to clear the annotation at. (required)
     * @param  \OpenAPI\Client\Model\AnnotationDto $annotation_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setIncidentAnnotationRequest($id, $annotation_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling setIncidentAnnotation'
            );
        }

        $resourcePath = '/incident/{id}/annotation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($annotation_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($annotation_dto));
            } else {
                $httpBody = $annotation_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
