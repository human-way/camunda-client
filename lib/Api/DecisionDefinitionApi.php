<?php
/**
 * DecisionDefinitionApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.15.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DecisionDefinitionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DecisionDefinitionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation evaluateDecisionById
     *
     * Evaluate By Id
     *
     * @param  string $id The id of the decision definition to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto evaluate_decision_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,\OpenAPI\Client\Model\VariableValueDto>[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function evaluateDecisionById($id, $evaluate_decision_dto = null)
    {
        list($response) = $this->evaluateDecisionByIdWithHttpInfo($id, $evaluate_decision_dto);
        return $response;
    }

    /**
     * Operation evaluateDecisionByIdWithHttpInfo
     *
     * Evaluate By Id
     *
     * @param  string $id The id of the decision definition to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,\OpenAPI\Client\Model\VariableValueDto>[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluateDecisionByIdWithHttpInfo($id, $evaluate_decision_dto = null)
    {
        $request = $this->evaluateDecisionByIdRequest($id, $evaluate_decision_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,\OpenAPI\Client\Model\VariableValueDto>[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\OpenAPI\Client\Model\VariableValueDto>[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation evaluateDecisionByIdAsync
     *
     * Evaluate By Id
     *
     * @param  string $id The id of the decision definition to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateDecisionByIdAsync($id, $evaluate_decision_dto = null)
    {
        return $this->evaluateDecisionByIdAsyncWithHttpInfo($id, $evaluate_decision_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation evaluateDecisionByIdAsyncWithHttpInfo
     *
     * Evaluate By Id
     *
     * @param  string $id The id of the decision definition to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateDecisionByIdAsyncWithHttpInfo($id, $evaluate_decision_dto = null)
    {
        $returnType = 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]';
        $request = $this->evaluateDecisionByIdRequest($id, $evaluate_decision_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'evaluateDecisionById'
     *
     * @param  string $id The id of the decision definition to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function evaluateDecisionByIdRequest($id, $evaluate_decision_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling evaluateDecisionById'
            );
        }

        $resourcePath = '/decision-definition/{id}/evaluate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($evaluate_decision_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($evaluate_decision_dto));
            } else {
                $httpBody = $evaluate_decision_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation evaluateDecisionByKey
     *
     * Evaluate By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto evaluate_decision_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,\OpenAPI\Client\Model\VariableValueDto>[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function evaluateDecisionByKey($key, $evaluate_decision_dto = null)
    {
        list($response) = $this->evaluateDecisionByKeyWithHttpInfo($key, $evaluate_decision_dto);
        return $response;
    }

    /**
     * Operation evaluateDecisionByKeyWithHttpInfo
     *
     * Evaluate By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,\OpenAPI\Client\Model\VariableValueDto>[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluateDecisionByKeyWithHttpInfo($key, $evaluate_decision_dto = null)
    {
        $request = $this->evaluateDecisionByKeyRequest($key, $evaluate_decision_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,\OpenAPI\Client\Model\VariableValueDto>[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\OpenAPI\Client\Model\VariableValueDto>[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation evaluateDecisionByKeyAsync
     *
     * Evaluate By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateDecisionByKeyAsync($key, $evaluate_decision_dto = null)
    {
        return $this->evaluateDecisionByKeyAsyncWithHttpInfo($key, $evaluate_decision_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation evaluateDecisionByKeyAsyncWithHttpInfo
     *
     * Evaluate By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateDecisionByKeyAsyncWithHttpInfo($key, $evaluate_decision_dto = null)
    {
        $returnType = 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]';
        $request = $this->evaluateDecisionByKeyRequest($key, $evaluate_decision_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'evaluateDecisionByKey'
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function evaluateDecisionByKeyRequest($key, $evaluate_decision_dto = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling evaluateDecisionByKey'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/evaluate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($evaluate_decision_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($evaluate_decision_dto));
            } else {
                $httpBody = $evaluate_decision_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation evaluateDecisionByKeyAndTenant
     *
     * Evaluate By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto evaluate_decision_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,\OpenAPI\Client\Model\VariableValueDto>[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function evaluateDecisionByKeyAndTenant($key, $tenant_id, $evaluate_decision_dto = null)
    {
        list($response) = $this->evaluateDecisionByKeyAndTenantWithHttpInfo($key, $tenant_id, $evaluate_decision_dto);
        return $response;
    }

    /**
     * Operation evaluateDecisionByKeyAndTenantWithHttpInfo
     *
     * Evaluate By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,\OpenAPI\Client\Model\VariableValueDto>[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function evaluateDecisionByKeyAndTenantWithHttpInfo($key, $tenant_id, $evaluate_decision_dto = null)
    {
        $request = $this->evaluateDecisionByKeyAndTenantRequest($key, $tenant_id, $evaluate_decision_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,\OpenAPI\Client\Model\VariableValueDto>[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\OpenAPI\Client\Model\VariableValueDto>[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation evaluateDecisionByKeyAndTenantAsync
     *
     * Evaluate By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateDecisionByKeyAndTenantAsync($key, $tenant_id, $evaluate_decision_dto = null)
    {
        return $this->evaluateDecisionByKeyAndTenantAsyncWithHttpInfo($key, $tenant_id, $evaluate_decision_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation evaluateDecisionByKeyAndTenantAsyncWithHttpInfo
     *
     * Evaluate By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function evaluateDecisionByKeyAndTenantAsyncWithHttpInfo($key, $tenant_id, $evaluate_decision_dto = null)
    {
        $returnType = 'array<string,\OpenAPI\Client\Model\VariableValueDto>[]';
        $request = $this->evaluateDecisionByKeyAndTenantRequest($key, $tenant_id, $evaluate_decision_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'evaluateDecisionByKeyAndTenant'
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be evaluated. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\EvaluateDecisionDto $evaluate_decision_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function evaluateDecisionByKeyAndTenantRequest($key, $tenant_id, $evaluate_decision_dto = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling evaluateDecisionByKeyAndTenant'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling evaluateDecisionByKeyAndTenant'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/tenant-id/{tenant-id}/evaluate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($evaluate_decision_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($evaluate_decision_dto));
            } else {
                $httpBody = $evaluate_decision_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionById
     *
     * Get Decision Definition By Id
     *
     * @param  string $id The id of the decision definition to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionDefinitionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionById($id)
    {
        list($response) = $this->getDecisionDefinitionByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionByIdWithHttpInfo
     *
     * Get Decision Definition By Id
     *
     * @param  string $id The id of the decision definition to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionDefinitionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionByIdWithHttpInfo($id)
    {
        $request = $this->getDecisionDefinitionByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionDefinitionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionDefinitionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionDefinitionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionByIdAsync
     *
     * Get Decision Definition By Id
     *
     * @param  string $id The id of the decision definition to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionByIdAsync($id)
    {
        return $this->getDecisionDefinitionByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionByIdAsyncWithHttpInfo
     *
     * Get Decision Definition By Id
     *
     * @param  string $id The id of the decision definition to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto';
        $request = $this->getDecisionDefinitionByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionById'
     *
     * @param  string $id The id of the decision definition to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDecisionDefinitionById'
            );
        }

        $resourcePath = '/decision-definition/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionByKey
     *
     * Get Decision Definition By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionDefinitionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionByKey($key)
    {
        list($response) = $this->getDecisionDefinitionByKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionByKeyWithHttpInfo
     *
     * Get Decision Definition By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionDefinitionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionByKeyWithHttpInfo($key)
    {
        $request = $this->getDecisionDefinitionByKeyRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionDefinitionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionDefinitionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionDefinitionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionByKeyAsync
     *
     * Get Decision Definition By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionByKeyAsync($key)
    {
        return $this->getDecisionDefinitionByKeyAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionByKeyAsyncWithHttpInfo
     *
     * Get Decision Definition By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionByKeyAsyncWithHttpInfo($key)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto';
        $request = $this->getDecisionDefinitionByKeyRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionByKey'
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionByKeyRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionDefinitionByKey'
            );
        }

        $resourcePath = '/decision-definition/key/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionByKeyAndTenantId
     *
     * Get Decision Definition By Key And Tenant Id
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionDefinitionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionByKeyAndTenantId($key, $tenant_id)
    {
        list($response) = $this->getDecisionDefinitionByKeyAndTenantIdWithHttpInfo($key, $tenant_id);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionByKeyAndTenantIdWithHttpInfo
     *
     * Get Decision Definition By Key And Tenant Id
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionDefinitionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionByKeyAndTenantIdWithHttpInfo($key, $tenant_id)
    {
        $request = $this->getDecisionDefinitionByKeyAndTenantIdRequest($key, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionDefinitionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionDefinitionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionDefinitionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionByKeyAndTenantIdAsync
     *
     * Get Decision Definition By Key And Tenant Id
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionByKeyAndTenantIdAsync($key, $tenant_id)
    {
        return $this->getDecisionDefinitionByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionByKeyAndTenantIdAsyncWithHttpInfo
     *
     * Get Decision Definition By Key And Tenant Id
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionByKeyAndTenantIdAsyncWithHttpInfo($key, $tenant_id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto';
        $request = $this->getDecisionDefinitionByKeyAndTenantIdRequest($key, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionByKeyAndTenantId'
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionByKeyAndTenantIdRequest($key, $tenant_id)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionDefinitionByKeyAndTenantId'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDecisionDefinitionByKeyAndTenantId'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/tenant-id/{tenant-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionDiagram
     *
     * Get Diagram
     *
     * @param  string $id The id of the process definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionDiagram($id)
    {
        list($response) = $this->getDecisionDefinitionDiagramWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionDiagramWithHttpInfo
     *
     * Get Diagram
     *
     * @param  string $id The id of the process definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionDiagramWithHttpInfo($id)
    {
        $request = $this->getDecisionDefinitionDiagramRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionDiagramAsync
     *
     * Get Diagram
     *
     * @param  string $id The id of the process definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDiagramAsync($id)
    {
        return $this->getDecisionDefinitionDiagramAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionDiagramAsyncWithHttpInfo
     *
     * Get Diagram
     *
     * @param  string $id The id of the process definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDiagramAsyncWithHttpInfo($id)
    {
        $returnType = '\SplFileObject';
        $request = $this->getDecisionDefinitionDiagramRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionDiagram'
     *
     * @param  string $id The id of the process definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionDiagramRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDecisionDefinitionDiagram'
            );
        }

        $resourcePath = '/decision-definition/{id}/diagram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionDiagramByKey
     *
     * Get Diagram By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionDiagramByKey($key)
    {
        list($response) = $this->getDecisionDefinitionDiagramByKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionDiagramByKeyWithHttpInfo
     *
     * Get Diagram By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionDiagramByKeyWithHttpInfo($key)
    {
        $request = $this->getDecisionDefinitionDiagramByKeyRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionDiagramByKeyAsync
     *
     * Get Diagram By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDiagramByKeyAsync($key)
    {
        return $this->getDecisionDefinitionDiagramByKeyAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionDiagramByKeyAsyncWithHttpInfo
     *
     * Get Diagram By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDiagramByKeyAsyncWithHttpInfo($key)
    {
        $returnType = '\SplFileObject';
        $request = $this->getDecisionDefinitionDiagramByKeyRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionDiagramByKey'
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionDiagramByKeyRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionDefinitionDiagramByKey'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/diagram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionDiagramByKeyAndTenant
     *
     * Get Diagram By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionDiagramByKeyAndTenant($key, $tenant_id)
    {
        list($response) = $this->getDecisionDefinitionDiagramByKeyAndTenantWithHttpInfo($key, $tenant_id);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionDiagramByKeyAndTenantWithHttpInfo
     *
     * Get Diagram By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionDiagramByKeyAndTenantWithHttpInfo($key, $tenant_id)
    {
        $request = $this->getDecisionDefinitionDiagramByKeyAndTenantRequest($key, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionDiagramByKeyAndTenantAsync
     *
     * Get Diagram By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDiagramByKeyAndTenantAsync($key, $tenant_id)
    {
        return $this->getDecisionDefinitionDiagramByKeyAndTenantAsyncWithHttpInfo($key, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionDiagramByKeyAndTenantAsyncWithHttpInfo
     *
     * Get Diagram By Key And Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDiagramByKeyAndTenantAsyncWithHttpInfo($key, $tenant_id)
    {
        $returnType = '\SplFileObject';
        $request = $this->getDecisionDefinitionDiagramByKeyAndTenantRequest($key, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionDiagramByKeyAndTenant'
     *
     * @param  string $key The key of the decision definition (the latest version thereof) to be retrieved. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionDiagramByKeyAndTenantRequest($key, $tenant_id)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionDefinitionDiagramByKeyAndTenant'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDecisionDefinitionDiagramByKeyAndTenant'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/tenant-id/{tenant-id}/diagram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionDmnXmlById
     *
     * Get XML By Id
     *
     * @param  string $id The id of the decision definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionDefinitionDiagramDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionDmnXmlById($id)
    {
        list($response) = $this->getDecisionDefinitionDmnXmlByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByIdWithHttpInfo
     *
     * Get XML By Id
     *
     * @param  string $id The id of the decision definition. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionDefinitionDiagramDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionDmnXmlByIdWithHttpInfo($id)
    {
        $request = $this->getDecisionDefinitionDmnXmlByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionDefinitionDiagramDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByIdAsync
     *
     * Get XML By Id
     *
     * @param  string $id The id of the decision definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDmnXmlByIdAsync($id)
    {
        return $this->getDecisionDefinitionDmnXmlByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByIdAsyncWithHttpInfo
     *
     * Get XML By Id
     *
     * @param  string $id The id of the decision definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDmnXmlByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto';
        $request = $this->getDecisionDefinitionDmnXmlByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionDmnXmlById'
     *
     * @param  string $id The id of the decision definition. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionDmnXmlByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDecisionDefinitionDmnXmlById'
            );
        }

        $resourcePath = '/decision-definition/{id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKey
     *
     * Get XML By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionDefinitionDiagramDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionDmnXmlByKey($key)
    {
        list($response) = $this->getDecisionDefinitionDmnXmlByKeyWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKeyWithHttpInfo
     *
     * Get XML By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionDefinitionDiagramDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionDmnXmlByKeyWithHttpInfo($key)
    {
        $request = $this->getDecisionDefinitionDmnXmlByKeyRequest($key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionDefinitionDiagramDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKeyAsync
     *
     * Get XML By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDmnXmlByKeyAsync($key)
    {
        return $this->getDecisionDefinitionDmnXmlByKeyAsyncWithHttpInfo($key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKeyAsyncWithHttpInfo
     *
     * Get XML By Key
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDmnXmlByKeyAsyncWithHttpInfo($key)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto';
        $request = $this->getDecisionDefinitionDmnXmlByKeyRequest($key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionDmnXmlByKey'
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionDmnXmlByKeyRequest($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionDefinitionDmnXmlByKey'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKeyAndTenant
     *
     * Get XML By Key and Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionDefinitionDiagramDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionDmnXmlByKeyAndTenant($key, $tenant_id)
    {
        list($response) = $this->getDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfo($key, $tenant_id);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfo
     *
     * Get XML By Key and Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionDefinitionDiagramDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionDmnXmlByKeyAndTenantWithHttpInfo($key, $tenant_id)
    {
        $request = $this->getDecisionDefinitionDmnXmlByKeyAndTenantRequest($key, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionDefinitionDiagramDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKeyAndTenantAsync
     *
     * Get XML By Key and Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDmnXmlByKeyAndTenantAsync($key, $tenant_id)
    {
        return $this->getDecisionDefinitionDmnXmlByKeyAndTenantAsyncWithHttpInfo($key, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionDmnXmlByKeyAndTenantAsyncWithHttpInfo
     *
     * Get XML By Key and Tenant
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionDmnXmlByKeyAndTenantAsyncWithHttpInfo($key, $tenant_id)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDiagramDto';
        $request = $this->getDecisionDefinitionDmnXmlByKeyAndTenantRequest($key, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionDmnXmlByKeyAndTenant'
     *
     * @param  string $key The key of the decision definition (the latest version thereof). (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionDmnXmlByKeyAndTenantRequest($key, $tenant_id)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDecisionDefinitionDmnXmlByKeyAndTenant'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDecisionDefinitionDmnXmlByKeyAndTenant'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/tenant-id/{tenant-id}/xml';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitions
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DecisionDefinitionDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitions($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        list($response) = $this->getDecisionDefinitionsWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionsWithHttpInfo
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DecisionDefinitionDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionsWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        $request = $this->getDecisionDefinitionsRequest($sort_by, $sort_order, $first_result, $max_results, $decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DecisionDefinitionDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DecisionDefinitionDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DecisionDefinitionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionsAsync
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionsAsync($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        return $this->getDecisionDefinitionsAsyncWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionsAsyncWithHttpInfo
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionsAsyncWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        $returnType = '\OpenAPI\Client\Model\DecisionDefinitionDto[]';
        $request = $this->getDecisionDefinitionsRequest($sort_by, $sort_order, $first_result, $max_results, $decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitions'
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionsRequest($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {

        $resourcePath = '/decision-definition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }
        // query params
        if ($decision_definition_id !== null) {
            if('form' === 'form' && is_array($decision_definition_id)) {
                foreach($decision_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionId'] = $decision_definition_id;
            }
        }
        // query params
        if ($decision_definition_id_in !== null) {
            if('form' === 'form' && is_array($decision_definition_id_in)) {
                foreach($decision_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionIdIn'] = $decision_definition_id_in;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($name_like !== null) {
            if('form' === 'form' && is_array($name_like)) {
                foreach($name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nameLike'] = $name_like;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($deployed_after !== null) {
            if('form' === 'form' && is_array($deployed_after)) {
                foreach($deployed_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployedAfter'] = $deployed_after;
            }
        }
        // query params
        if ($deployed_at !== null) {
            if('form' === 'form' && is_array($deployed_at)) {
                foreach($deployed_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployedAt'] = $deployed_at;
            }
        }
        // query params
        if ($key !== null) {
            if('form' === 'form' && is_array($key)) {
                foreach($key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['key'] = $key;
            }
        }
        // query params
        if ($key_like !== null) {
            if('form' === 'form' && is_array($key_like)) {
                foreach($key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyLike'] = $key_like;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($category_like !== null) {
            if('form' === 'form' && is_array($category_like)) {
                foreach($category_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['categoryLike'] = $category_like;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($latest_version !== null) {
            if('form' === 'form' && is_array($latest_version)) {
                foreach($latest_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['latestVersion'] = $latest_version;
            }
        }
        // query params
        if ($resource_name !== null) {
            if('form' === 'form' && is_array($resource_name)) {
                foreach($resource_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceName'] = $resource_name;
            }
        }
        // query params
        if ($resource_name_like !== null) {
            if('form' === 'form' && is_array($resource_name_like)) {
                foreach($resource_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceNameLike'] = $resource_name_like;
            }
        }
        // query params
        if ($decision_requirements_definition_id !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id)) {
                foreach($decision_requirements_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionId'] = $decision_requirements_definition_id;
            }
        }
        // query params
        if ($decision_requirements_definition_key !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_key)) {
                foreach($decision_requirements_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionKey'] = $decision_requirements_definition_key;
            }
        }
        // query params
        if ($without_decision_requirements_definition !== null) {
            if('form' === 'form' && is_array($without_decision_requirements_definition)) {
                foreach($without_decision_requirements_definition as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutDecisionRequirementsDefinition'] = $without_decision_requirements_definition;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($include_decision_definitions_without_tenant_id !== null) {
            if('form' === 'form' && is_array($include_decision_definitions_without_tenant_id)) {
                foreach($include_decision_definitions_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeDecisionDefinitionsWithoutTenantId'] = $include_decision_definitions_without_tenant_id;
            }
        }
        // query params
        if ($version_tag !== null) {
            if('form' === 'form' && is_array($version_tag)) {
                foreach($version_tag as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['versionTag'] = $version_tag;
            }
        }
        // query params
        if ($version_tag_like !== null) {
            if('form' === 'form' && is_array($version_tag_like)) {
                foreach($version_tag_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['versionTagLike'] = $version_tag_like;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionDefinitionsCount
     *
     * Get List Count
     *
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getDecisionDefinitionsCount($decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        list($response) = $this->getDecisionDefinitionsCountWithHttpInfo($decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like);
        return $response;
    }

    /**
     * Operation getDecisionDefinitionsCountWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionDefinitionsCountWithHttpInfo($decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        $request = $this->getDecisionDefinitionsCountRequest($decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionDefinitionsCountAsync
     *
     * Get List Count
     *
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionsCountAsync($decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        return $this->getDecisionDefinitionsCountAsyncWithHttpInfo($decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionDefinitionsCountAsyncWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionDefinitionsCountAsyncWithHttpInfo($decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->getDecisionDefinitionsCountRequest($decision_definition_id, $decision_definition_id_in, $name, $name_like, $deployment_id, $deployed_after, $deployed_at, $key, $key_like, $category, $category_like, $version, $latest_version, $resource_name, $resource_name_like, $decision_requirements_definition_id, $decision_requirements_definition_key, $without_decision_requirements_definition, $tenant_id_in, $without_tenant_id, $include_decision_definitions_without_tenant_id, $version_tag, $version_tag_like);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionDefinitionsCount'
     *
     * @param  string $decision_definition_id Filter by decision definition id. (optional)
     * @param  string $decision_definition_id_in Filter by decision definition ids. (optional)
     * @param  string $name Filter by decision definition name. (optional)
     * @param  string $name_like Filter by decision definition names that the parameter is a substring of. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  \DateTime $deployed_after Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed after (exclusive) a specific time. (optional)
     * @param  \DateTime $deployed_at Filter by the deploy time of the deployment the decision definition belongs to. Only selects decision definitions that have been deployed at a specific time (exact match). (optional)
     * @param  string $key Filter by decision definition key, i.e., the id in the DMN 1.0 XML. Exact match. (optional)
     * @param  string $key_like Filter by decision definition keys that the parameter is a substring of. (optional)
     * @param  string $category Filter by decision definition category. Exact match. (optional)
     * @param  string $category_like Filter by decision definition categories that the parameter is a substring of. (optional)
     * @param  int $version Filter by decision definition version. (optional)
     * @param  bool $latest_version Only include those decision definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $resource_name Filter by the name of the decision definition resource. Exact match. (optional)
     * @param  string $resource_name_like Filter by names of those decision definition resources that the parameter is a substring of. (optional)
     * @param  string $decision_requirements_definition_id Filter by the id of the decision requirements definition this decision definition belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition this decision definition belongs to. (optional)
     * @param  bool $without_decision_requirements_definition Only include decision definitions which does not belongs to any decision requirements definition. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of &#x60;Strings&#x60;. A decision definition must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include decision definitions which belong to no tenant. Value can effectively only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_decision_definitions_without_tenant_id Include decision definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $version_tag Filter by the version tag. (optional)
     * @param  string $version_tag_like Filter by the version tags of those decision definition resources that the parameter is a substring of. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDecisionDefinitionsCountRequest($decision_definition_id = null, $decision_definition_id_in = null, $name = null, $name_like = null, $deployment_id = null, $deployed_after = null, $deployed_at = null, $key = null, $key_like = null, $category = null, $category_like = null, $version = null, $latest_version = null, $resource_name = null, $resource_name_like = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $without_decision_requirements_definition = null, $tenant_id_in = null, $without_tenant_id = null, $include_decision_definitions_without_tenant_id = null, $version_tag = null, $version_tag_like = null)
    {

        $resourcePath = '/decision-definition/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($decision_definition_id !== null) {
            if('form' === 'form' && is_array($decision_definition_id)) {
                foreach($decision_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionId'] = $decision_definition_id;
            }
        }
        // query params
        if ($decision_definition_id_in !== null) {
            if('form' === 'form' && is_array($decision_definition_id_in)) {
                foreach($decision_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionIdIn'] = $decision_definition_id_in;
            }
        }
        // query params
        if ($name !== null) {
            if('form' === 'form' && is_array($name)) {
                foreach($name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['name'] = $name;
            }
        }
        // query params
        if ($name_like !== null) {
            if('form' === 'form' && is_array($name_like)) {
                foreach($name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nameLike'] = $name_like;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($deployed_after !== null) {
            if('form' === 'form' && is_array($deployed_after)) {
                foreach($deployed_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployedAfter'] = $deployed_after;
            }
        }
        // query params
        if ($deployed_at !== null) {
            if('form' === 'form' && is_array($deployed_at)) {
                foreach($deployed_at as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deployedAt'] = $deployed_at;
            }
        }
        // query params
        if ($key !== null) {
            if('form' === 'form' && is_array($key)) {
                foreach($key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['key'] = $key;
            }
        }
        // query params
        if ($key_like !== null) {
            if('form' === 'form' && is_array($key_like)) {
                foreach($key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['keyLike'] = $key_like;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($category_like !== null) {
            if('form' === 'form' && is_array($category_like)) {
                foreach($category_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['categoryLike'] = $category_like;
            }
        }
        // query params
        if ($version !== null) {
            if('form' === 'form' && is_array($version)) {
                foreach($version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['version'] = $version;
            }
        }
        // query params
        if ($latest_version !== null) {
            if('form' === 'form' && is_array($latest_version)) {
                foreach($latest_version as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['latestVersion'] = $latest_version;
            }
        }
        // query params
        if ($resource_name !== null) {
            if('form' === 'form' && is_array($resource_name)) {
                foreach($resource_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceName'] = $resource_name;
            }
        }
        // query params
        if ($resource_name_like !== null) {
            if('form' === 'form' && is_array($resource_name_like)) {
                foreach($resource_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['resourceNameLike'] = $resource_name_like;
            }
        }
        // query params
        if ($decision_requirements_definition_id !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id)) {
                foreach($decision_requirements_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionId'] = $decision_requirements_definition_id;
            }
        }
        // query params
        if ($decision_requirements_definition_key !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_key)) {
                foreach($decision_requirements_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionKey'] = $decision_requirements_definition_key;
            }
        }
        // query params
        if ($without_decision_requirements_definition !== null) {
            if('form' === 'form' && is_array($without_decision_requirements_definition)) {
                foreach($without_decision_requirements_definition as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutDecisionRequirementsDefinition'] = $without_decision_requirements_definition;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($include_decision_definitions_without_tenant_id !== null) {
            if('form' === 'form' && is_array($include_decision_definitions_without_tenant_id)) {
                foreach($include_decision_definitions_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeDecisionDefinitionsWithoutTenantId'] = $include_decision_definitions_without_tenant_id;
            }
        }
        // query params
        if ($version_tag !== null) {
            if('form' === 'form' && is_array($version_tag)) {
                foreach($version_tag as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['versionTag'] = $version_tag;
            }
        }
        // query params
        if ($version_tag_like !== null) {
            if('form' === 'form' && is_array($version_tag_like)) {
                foreach($version_tag_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['versionTagLike'] = $version_tag_like;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionId
     *
     * Update History Time to Live
     *
     * @param  string $id The id of the decision definition to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto history_time_to_live_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionId($id, $history_time_to_live_dto = null)
    {
        $this->updateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfo($id, $history_time_to_live_dto);
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfo
     *
     * Update History Time to Live
     *
     * @param  string $id The id of the decision definition to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionIdWithHttpInfo($id, $history_time_to_live_dto = null)
    {
        $request = $this->updateHistoryTimeToLiveByDecisionDefinitionIdRequest($id, $history_time_to_live_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionIdAsync
     *
     * Update History Time to Live
     *
     * @param  string $id The id of the decision definition to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionIdAsync($id, $history_time_to_live_dto = null)
    {
        return $this->updateHistoryTimeToLiveByDecisionDefinitionIdAsyncWithHttpInfo($id, $history_time_to_live_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionIdAsyncWithHttpInfo
     *
     * Update History Time to Live
     *
     * @param  string $id The id of the decision definition to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionIdAsyncWithHttpInfo($id, $history_time_to_live_dto = null)
    {
        $returnType = '';
        $request = $this->updateHistoryTimeToLiveByDecisionDefinitionIdRequest($id, $history_time_to_live_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateHistoryTimeToLiveByDecisionDefinitionId'
     *
     * @param  string $id The id of the decision definition to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionIdRequest($id, $history_time_to_live_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateHistoryTimeToLiveByDecisionDefinitionId'
            );
        }

        $resourcePath = '/decision-definition/{id}/history-time-to-live';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($history_time_to_live_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($history_time_to_live_dto));
            } else {
                $httpBody = $history_time_to_live_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKey
     *
     * Update History Time to Live By Key
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto history_time_to_live_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKey($key, $history_time_to_live_dto = null)
    {
        $this->updateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfo($key, $history_time_to_live_dto);
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfo
     *
     * Update History Time to Live By Key
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyWithHttpInfo($key, $history_time_to_live_dto = null)
    {
        $request = $this->updateHistoryTimeToLiveByDecisionDefinitionKeyRequest($key, $history_time_to_live_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKeyAsync
     *
     * Update History Time to Live By Key
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyAsync($key, $history_time_to_live_dto = null)
    {
        return $this->updateHistoryTimeToLiveByDecisionDefinitionKeyAsyncWithHttpInfo($key, $history_time_to_live_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKeyAsyncWithHttpInfo
     *
     * Update History Time to Live By Key
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyAsyncWithHttpInfo($key, $history_time_to_live_dto = null)
    {
        $returnType = '';
        $request = $this->updateHistoryTimeToLiveByDecisionDefinitionKeyRequest($key, $history_time_to_live_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateHistoryTimeToLiveByDecisionDefinitionKey'
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyRequest($key, $history_time_to_live_dto = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling updateHistoryTimeToLiveByDecisionDefinitionKey'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/history-time-to-live';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($history_time_to_live_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($history_time_to_live_dto));
            } else {
                $httpBody = $history_time_to_live_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant
     *
     * Update History Time to Live By Key And Tenant
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto history_time_to_live_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant($key, $tenant_id, $history_time_to_live_dto = null)
    {
        $this->updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfo($key, $tenant_id, $history_time_to_live_dto);
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfo
     *
     * Update History Time to Live By Key And Tenant
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantWithHttpInfo($key, $tenant_id, $history_time_to_live_dto = null)
    {
        $request = $this->updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantRequest($key, $tenant_id, $history_time_to_live_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantAsync
     *
     * Update History Time to Live By Key And Tenant
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantAsync($key, $tenant_id, $history_time_to_live_dto = null)
    {
        return $this->updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantAsyncWithHttpInfo($key, $tenant_id, $history_time_to_live_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantAsyncWithHttpInfo
     *
     * Update History Time to Live By Key And Tenant
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantAsyncWithHttpInfo($key, $tenant_id, $history_time_to_live_dto = null)
    {
        $returnType = '';
        $request = $this->updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantRequest($key, $tenant_id, $history_time_to_live_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant'
     *
     * @param  string $key The key of the decision definitions to change history time to live. (required)
     * @param  string $tenant_id The id of the tenant the decision definition belongs to. (required)
     * @param  \OpenAPI\Client\Model\HistoryTimeToLiveDto $history_time_to_live_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenantRequest($key, $tenant_id, $history_time_to_live_dto = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant'
            );
        }
        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling updateHistoryTimeToLiveByDecisionDefinitionKeyAndTenant'
            );
        }

        $resourcePath = '/decision-definition/key/{key}/tenant-id/{tenant-id}/history-time-to-live';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenant-id' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($history_time_to_live_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($history_time_to_live_dto));
            } else {
                $httpBody = $history_time_to_live_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
