<?php
/**
 * HistoricDetailApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HistoricDetailApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HistoricDetailApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHistoricDetails
     *
     * Get Historic Details
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricDetailDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricDetails($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        list($response) = $this->getHistoricDetailsWithHttpInfo($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);
        return $response;
    }

    /**
     * Operation getHistoricDetailsWithHttpInfo
     *
     * Get Historic Details
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricDetailDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDetailsWithHttpInfo($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $request = $this->getHistoricDetailsRequest($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricDetailDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricDetailDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricDetailDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricDetailDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDetailsAsync
     *
     * Get Historic Details
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailsAsync($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        return $this->getHistoricDetailsAsyncWithHttpInfo($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDetailsAsyncWithHttpInfo
     *
     * Get Historic Details
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailsAsyncWithHttpInfo($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricDetailDto[]';
        $request = $this->getHistoricDetailsRequest($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDetails'
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricDetailsRequest($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {

        $resourcePath = '/history/detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_instance_id_in !== null) {
            if('form' === 'form' && is_array($process_instance_id_in)) {
                foreach($process_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIdIn'] = $process_instance_id_in;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($task_id !== null) {
            if('form' === 'form' && is_array($task_id)) {
                foreach($task_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['taskId'] = $task_id;
            }
        }
        // query params
        if ($activity_instance_id !== null) {
            if('form' === 'form' && is_array($activity_instance_id)) {
                foreach($activity_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityInstanceId'] = $activity_instance_id;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($case_execution_id !== null) {
            if('form' === 'form' && is_array($case_execution_id)) {
                foreach($case_execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseExecutionId'] = $case_execution_id;
            }
        }
        // query params
        if ($variable_instance_id !== null) {
            if('form' === 'form' && is_array($variable_instance_id)) {
                foreach($variable_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableInstanceId'] = $variable_instance_id;
            }
        }
        // query params
        if ($variable_type_in !== null) {
            if('form' === 'form' && is_array($variable_type_in)) {
                foreach($variable_type_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableTypeIn'] = $variable_type_in;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($user_operation_id !== null) {
            if('form' === 'form' && is_array($user_operation_id)) {
                foreach($user_operation_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userOperationId'] = $user_operation_id;
            }
        }
        // query params
        if ($form_fields !== null) {
            if('form' === 'form' && is_array($form_fields)) {
                foreach($form_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['formFields'] = $form_fields;
            }
        }
        // query params
        if ($variable_updates !== null) {
            if('form' === 'form' && is_array($variable_updates)) {
                foreach($variable_updates as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableUpdates'] = $variable_updates;
            }
        }
        // query params
        if ($exclude_task_details !== null) {
            if('form' === 'form' && is_array($exclude_task_details)) {
                foreach($exclude_task_details as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['excludeTaskDetails'] = $exclude_task_details;
            }
        }
        // query params
        if ($initial !== null) {
            if('form' === 'form' && is_array($initial)) {
                foreach($initial as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['initial'] = $initial;
            }
        }
        // query params
        if ($occurred_before !== null) {
            if('form' === 'form' && is_array($occurred_before)) {
                foreach($occurred_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['occurredBefore'] = $occurred_before;
            }
        }
        // query params
        if ($occurred_after !== null) {
            if('form' === 'form' && is_array($occurred_after)) {
                foreach($occurred_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['occurredAfter'] = $occurred_after;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }
        // query params
        if ($deserialize_values !== null) {
            if('form' === 'form' && is_array($deserialize_values)) {
                foreach($deserialize_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValues'] = $deserialize_values;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDetailsCount
     *
     * Get Historic Detail Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricDetailsCount($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null)
    {
        list($response) = $this->getHistoricDetailsCountWithHttpInfo($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after);
        return $response;
    }

    /**
     * Operation getHistoricDetailsCountWithHttpInfo
     *
     * Get Historic Detail Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDetailsCountWithHttpInfo($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null)
    {
        $request = $this->getHistoricDetailsCountRequest($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDetailsCountAsync
     *
     * Get Historic Detail Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailsCountAsync($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null)
    {
        return $this->getHistoricDetailsCountAsyncWithHttpInfo($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDetailsCountAsyncWithHttpInfo
     *
     * Get Historic Detail Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailsCountAsyncWithHttpInfo($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->getHistoricDetailsCountRequest($process_instance_id, $process_instance_id_in, $execution_id, $task_id, $activity_instance_id, $case_instance_id, $case_execution_id, $variable_instance_id, $variable_type_in, $tenant_id_in, $without_tenant_id, $user_operation_id, $form_fields, $variable_updates, $exclude_task_details, $initial, $occurred_before, $occurred_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDetailsCount'
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_id_in Only include historic details which belong to one of the passed comma-separated process instance ids. (optional)
     * @param  string $execution_id Filter by execution id. (optional)
     * @param  string $task_id Filter by task id. (optional)
     * @param  string $activity_instance_id Filter by activity instance id. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $case_execution_id Filter by case execution id. (optional)
     * @param  string $variable_instance_id Filter by variable instance id. (optional)
     * @param  string $variable_type_in Only include historic details where the variable updates belong to one of the passed comma-separated list of variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/latest/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x60;serializable&#x60;. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic details that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $user_operation_id Filter by a user operation id. (optional)
     * @param  bool $form_fields Only include &#x60;HistoricFormFields&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $variable_updates Only include &#x60;HistoricVariableUpdates&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $exclude_task_details Excludes all task-related &#x60;HistoricDetails&#x60;, so only items which have no task id set will be selected. When this parameter is used together with &#x60;taskId&#x60;, this call is ignored and task details are not excluded. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $initial Restrict to historic variable updates that contain only initial variable values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $occurred_before Restrict to historic details that occured before the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     * @param  \DateTime $occurred_after Restrict to historic details that occured after the given date (including the date). Default [format](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/) &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., 2013-01-23T14:42:45.000+0200. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricDetailsCountRequest($process_instance_id = null, $process_instance_id_in = null, $execution_id = null, $task_id = null, $activity_instance_id = null, $case_instance_id = null, $case_execution_id = null, $variable_instance_id = null, $variable_type_in = null, $tenant_id_in = null, $without_tenant_id = null, $user_operation_id = null, $form_fields = null, $variable_updates = null, $exclude_task_details = null, $initial = null, $occurred_before = null, $occurred_after = null)
    {

        $resourcePath = '/history/detail/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($process_instance_id_in !== null) {
            if('form' === 'form' && is_array($process_instance_id_in)) {
                foreach($process_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIdIn'] = $process_instance_id_in;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($task_id !== null) {
            if('form' === 'form' && is_array($task_id)) {
                foreach($task_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['taskId'] = $task_id;
            }
        }
        // query params
        if ($activity_instance_id !== null) {
            if('form' === 'form' && is_array($activity_instance_id)) {
                foreach($activity_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityInstanceId'] = $activity_instance_id;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($case_execution_id !== null) {
            if('form' === 'form' && is_array($case_execution_id)) {
                foreach($case_execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseExecutionId'] = $case_execution_id;
            }
        }
        // query params
        if ($variable_instance_id !== null) {
            if('form' === 'form' && is_array($variable_instance_id)) {
                foreach($variable_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableInstanceId'] = $variable_instance_id;
            }
        }
        // query params
        if ($variable_type_in !== null) {
            if('form' === 'form' && is_array($variable_type_in)) {
                foreach($variable_type_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableTypeIn'] = $variable_type_in;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($user_operation_id !== null) {
            if('form' === 'form' && is_array($user_operation_id)) {
                foreach($user_operation_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userOperationId'] = $user_operation_id;
            }
        }
        // query params
        if ($form_fields !== null) {
            if('form' === 'form' && is_array($form_fields)) {
                foreach($form_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['formFields'] = $form_fields;
            }
        }
        // query params
        if ($variable_updates !== null) {
            if('form' === 'form' && is_array($variable_updates)) {
                foreach($variable_updates as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableUpdates'] = $variable_updates;
            }
        }
        // query params
        if ($exclude_task_details !== null) {
            if('form' === 'form' && is_array($exclude_task_details)) {
                foreach($exclude_task_details as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['excludeTaskDetails'] = $exclude_task_details;
            }
        }
        // query params
        if ($initial !== null) {
            if('form' === 'form' && is_array($initial)) {
                foreach($initial as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['initial'] = $initial;
            }
        }
        // query params
        if ($occurred_before !== null) {
            if('form' === 'form' && is_array($occurred_before)) {
                foreach($occurred_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['occurredBefore'] = $occurred_before;
            }
        }
        // query params
        if ($occurred_after !== null) {
            if('form' === 'form' && is_array($occurred_after)) {
                foreach($occurred_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['occurredAfter'] = $occurred_after;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation historicDetail
     *
     * Get Historic Detail
     *
     * @param  string $id The id of the detail. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricDetailDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function historicDetail($id, $deserialize_value = null)
    {
        list($response) = $this->historicDetailWithHttpInfo($id, $deserialize_value);
        return $response;
    }

    /**
     * Operation historicDetailWithHttpInfo
     *
     * Get Historic Detail
     *
     * @param  string $id The id of the detail. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricDetailDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function historicDetailWithHttpInfo($id, $deserialize_value = null)
    {
        $request = $this->historicDetailRequest($id, $deserialize_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricDetailDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricDetailDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricDetailDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricDetailDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation historicDetailAsync
     *
     * Get Historic Detail
     *
     * @param  string $id The id of the detail. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historicDetailAsync($id, $deserialize_value = null)
    {
        return $this->historicDetailAsyncWithHttpInfo($id, $deserialize_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation historicDetailAsyncWithHttpInfo
     *
     * Get Historic Detail
     *
     * @param  string $id The id of the detail. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historicDetailAsyncWithHttpInfo($id, $deserialize_value = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricDetailDto';
        $request = $this->historicDetailRequest($id, $deserialize_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'historicDetail'
     *
     * @param  string $id The id of the detail. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function historicDetailRequest($id, $deserialize_value = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling historicDetail'
            );
        }

        $resourcePath = '/history/detail/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deserialize_value !== null) {
            if('form' === 'form' && is_array($deserialize_value)) {
                foreach($deserialize_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValue'] = $deserialize_value;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation historicDetailBinary
     *
     * Get Historic Detail (Binary)
     *
     * @param  string $id The id of the historic variable update. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ExceptionDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function historicDetailBinary($id)
    {
        list($response) = $this->historicDetailBinaryWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation historicDetailBinaryWithHttpInfo
     *
     * Get Historic Detail (Binary)
     *
     * @param  string $id The id of the historic variable update. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ExceptionDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function historicDetailBinaryWithHttpInfo($id)
    {
        $request = $this->historicDetailBinaryRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation historicDetailBinaryAsync
     *
     * Get Historic Detail (Binary)
     *
     * @param  string $id The id of the historic variable update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historicDetailBinaryAsync($id)
    {
        return $this->historicDetailBinaryAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation historicDetailBinaryAsyncWithHttpInfo
     *
     * Get Historic Detail (Binary)
     *
     * @param  string $id The id of the historic variable update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historicDetailBinaryAsyncWithHttpInfo($id)
    {
        $returnType = '\SplFileObject';
        $request = $this->historicDetailBinaryRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'historicDetailBinary'
     *
     * @param  string $id The id of the historic variable update. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function historicDetailBinaryRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling historicDetailBinary'
            );
        }

        $resourcePath = '/history/detail/{id}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricDetails
     *
     * Get Historic Details (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricDetailQueryDto $historic_detail_query_dto historic_detail_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricDetailDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function queryHistoricDetails($first_result = null, $max_results = null, $deserialize_values = null, $historic_detail_query_dto = null)
    {
        list($response) = $this->queryHistoricDetailsWithHttpInfo($first_result, $max_results, $deserialize_values, $historic_detail_query_dto);
        return $response;
    }

    /**
     * Operation queryHistoricDetailsWithHttpInfo
     *
     * Get Historic Details (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricDetailQueryDto $historic_detail_query_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricDetailDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricDetailsWithHttpInfo($first_result = null, $max_results = null, $deserialize_values = null, $historic_detail_query_dto = null)
    {
        $request = $this->queryHistoricDetailsRequest($first_result, $max_results, $deserialize_values, $historic_detail_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricDetailDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricDetailDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricDetailDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricDetailDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricDetailsAsync
     *
     * Get Historic Details (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricDetailQueryDto $historic_detail_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricDetailsAsync($first_result = null, $max_results = null, $deserialize_values = null, $historic_detail_query_dto = null)
    {
        return $this->queryHistoricDetailsAsyncWithHttpInfo($first_result, $max_results, $deserialize_values, $historic_detail_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricDetailsAsyncWithHttpInfo
     *
     * Get Historic Details (POST)
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricDetailQueryDto $historic_detail_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricDetailsAsyncWithHttpInfo($first_result = null, $max_results = null, $deserialize_values = null, $historic_detail_query_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricDetailDto[]';
        $request = $this->queryHistoricDetailsRequest($first_result, $max_results, $deserialize_values, $historic_detail_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricDetails'
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     * @param  \OpenAPI\Client\Model\HistoricDetailQueryDto $historic_detail_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function queryHistoricDetailsRequest($first_result = null, $max_results = null, $deserialize_values = null, $historic_detail_query_dto = null)
    {

        $resourcePath = '/history/detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }
        // query params
        if ($deserialize_values !== null) {
            if('form' === 'form' && is_array($deserialize_values)) {
                foreach($deserialize_values as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValues'] = $deserialize_values;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historic_detail_query_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historic_detail_query_dto));
            } else {
                $httpBody = $historic_detail_query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
