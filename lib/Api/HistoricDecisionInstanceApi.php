<?php
/**
 * HistoricDecisionInstanceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HistoricDecisionInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HistoricDecisionInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAsync
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricDecisionInstancesDto $delete_historic_decision_instances_dto delete_historic_decision_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function deleteAsync($delete_historic_decision_instances_dto = null)
    {
        list($response) = $this->deleteAsyncWithHttpInfo($delete_historic_decision_instances_dto);
        return $response;
    }

    /**
     * Operation deleteAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricDecisionInstancesDto $delete_historic_decision_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAsyncWithHttpInfo($delete_historic_decision_instances_dto = null)
    {
        $request = $this->deleteAsyncRequest($delete_historic_decision_instances_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BatchDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BatchDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAsyncAsync
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricDecisionInstancesDto $delete_historic_decision_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncAsync($delete_historic_decision_instances_dto = null)
    {
        return $this->deleteAsyncAsyncWithHttpInfo($delete_historic_decision_instances_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAsyncAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricDecisionInstancesDto $delete_historic_decision_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncAsyncWithHttpInfo($delete_historic_decision_instances_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\BatchDto';
        $request = $this->deleteAsyncRequest($delete_historic_decision_instances_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAsync'
     *
     * @param  \OpenAPI\Client\Model\DeleteHistoricDecisionInstancesDto $delete_historic_decision_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAsyncRequest($delete_historic_decision_instances_dto = null)
    {

        $resourcePath = '/history/decision-instance/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($delete_historic_decision_instances_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($delete_historic_decision_instances_dto));
            } else {
                $httpBody = $delete_historic_decision_instances_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDecisionInstance
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricDecisionInstanceDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricDecisionInstance($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        list($response) = $this->getHistoricDecisionInstanceWithHttpInfo($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization);
        return $response;
    }

    /**
     * Operation getHistoricDecisionInstanceWithHttpInfo
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricDecisionInstanceDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDecisionInstanceWithHttpInfo($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        $request = $this->getHistoricDecisionInstanceRequest($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricDecisionInstanceDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricDecisionInstanceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricDecisionInstanceDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricDecisionInstanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDecisionInstanceAsync
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstanceAsync($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        return $this->getHistoricDecisionInstanceAsyncWithHttpInfo($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDecisionInstanceAsyncWithHttpInfo
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstanceAsyncWithHttpInfo($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricDecisionInstanceDto';
        $request = $this->getHistoricDecisionInstanceRequest($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDecisionInstance'
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricDecisionInstanceRequest($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricDecisionInstance'
            );
        }

        $resourcePath = '/history/decision-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_inputs !== null) {
            if('form' === 'form' && is_array($include_inputs)) {
                foreach($include_inputs as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeInputs'] = $include_inputs;
            }
        }
        // query params
        if ($include_outputs !== null) {
            if('form' === 'form' && is_array($include_outputs)) {
                foreach($include_outputs as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeOutputs'] = $include_outputs;
            }
        }
        // query params
        if ($disable_binary_fetching !== null) {
            if('form' === 'form' && is_array($disable_binary_fetching)) {
                foreach($disable_binary_fetching as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['disableBinaryFetching'] = $disable_binary_fetching;
            }
        }
        // query params
        if ($disable_custom_object_deserialization !== null) {
            if('form' === 'form' && is_array($disable_custom_object_deserialization)) {
                foreach($disable_custom_object_deserialization as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['disableCustomObjectDeserialization'] = $disable_custom_object_deserialization;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDecisionInstances
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HistoricDecisionInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricDecisionInstances($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->getHistoricDecisionInstancesWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation getHistoricDecisionInstancesWithHttpInfo
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HistoricDecisionInstanceDto[]|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDecisionInstancesWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $request = $this->getHistoricDecisionInstancesRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\HistoricDecisionInstanceDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HistoricDecisionInstanceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\HistoricDecisionInstanceDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HistoricDecisionInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDecisionInstancesAsync
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesAsync($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        return $this->getHistoricDecisionInstancesAsyncWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDecisionInstancesAsyncWithHttpInfo
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesAsyncWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\OpenAPI\Client\Model\HistoricDecisionInstanceDto[]';
        $request = $this->getHistoricDecisionInstancesRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDecisionInstances'
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricDecisionInstancesRequest($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/history/decision-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($decision_instance_id !== null) {
            if('form' === 'form' && is_array($decision_instance_id)) {
                foreach($decision_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionInstanceId'] = $decision_instance_id;
            }
        }
        // query params
        if ($decision_instance_id_in !== null) {
            if('form' === 'form' && is_array($decision_instance_id_in)) {
                foreach($decision_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionInstanceIdIn'] = $decision_instance_id_in;
            }
        }
        // query params
        if ($decision_definition_id !== null) {
            if('form' === 'form' && is_array($decision_definition_id)) {
                foreach($decision_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionId'] = $decision_definition_id;
            }
        }
        // query params
        if ($decision_definition_id_in !== null) {
            if('form' === 'form' && is_array($decision_definition_id_in)) {
                foreach($decision_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionIdIn'] = $decision_definition_id_in;
            }
        }
        // query params
        if ($decision_definition_key !== null) {
            if('form' === 'form' && is_array($decision_definition_key)) {
                foreach($decision_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionKey'] = $decision_definition_key;
            }
        }
        // query params
        if ($decision_definition_key_in !== null) {
            if('form' === 'form' && is_array($decision_definition_key_in)) {
                foreach($decision_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionKeyIn'] = $decision_definition_key_in;
            }
        }
        // query params
        if ($decision_definition_name !== null) {
            if('form' === 'form' && is_array($decision_definition_name)) {
                foreach($decision_definition_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionName'] = $decision_definition_name;
            }
        }
        // query params
        if ($decision_definition_name_like !== null) {
            if('form' === 'form' && is_array($decision_definition_name_like)) {
                foreach($decision_definition_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionNameLike'] = $decision_definition_name_like;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($case_definition_id !== null) {
            if('form' === 'form' && is_array($case_definition_id)) {
                foreach($case_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseDefinitionId'] = $case_definition_id;
            }
        }
        // query params
        if ($case_definition_key !== null) {
            if('form' === 'form' && is_array($case_definition_key)) {
                foreach($case_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseDefinitionKey'] = $case_definition_key;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($activity_id_in !== null) {
            if('form' === 'form' && is_array($activity_id_in)) {
                foreach($activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityIdIn'] = $activity_id_in;
            }
        }
        // query params
        if ($activity_instance_id_in !== null) {
            if('form' === 'form' && is_array($activity_instance_id_in)) {
                foreach($activity_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityInstanceIdIn'] = $activity_instance_id_in;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($evaluated_before !== null) {
            if('form' === 'form' && is_array($evaluated_before)) {
                foreach($evaluated_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluatedBefore'] = $evaluated_before;
            }
        }
        // query params
        if ($evaluated_after !== null) {
            if('form' === 'form' && is_array($evaluated_after)) {
                foreach($evaluated_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluatedAfter'] = $evaluated_after;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }
        // query params
        if ($root_decision_instance_id !== null) {
            if('form' === 'form' && is_array($root_decision_instance_id)) {
                foreach($root_decision_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootDecisionInstanceId'] = $root_decision_instance_id;
            }
        }
        // query params
        if ($root_decision_instances_only !== null) {
            if('form' === 'form' && is_array($root_decision_instances_only)) {
                foreach($root_decision_instances_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootDecisionInstancesOnly'] = $root_decision_instances_only;
            }
        }
        // query params
        if ($decision_requirements_definition_id !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id)) {
                foreach($decision_requirements_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionId'] = $decision_requirements_definition_id;
            }
        }
        // query params
        if ($decision_requirements_definition_key !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_key)) {
                foreach($decision_requirements_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionKey'] = $decision_requirements_definition_key;
            }
        }
        // query params
        if ($include_inputs !== null) {
            if('form' === 'form' && is_array($include_inputs)) {
                foreach($include_inputs as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeInputs'] = $include_inputs;
            }
        }
        // query params
        if ($include_outputs !== null) {
            if('form' === 'form' && is_array($include_outputs)) {
                foreach($include_outputs as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeOutputs'] = $include_outputs;
            }
        }
        // query params
        if ($disable_binary_fetching !== null) {
            if('form' === 'form' && is_array($disable_binary_fetching)) {
                foreach($disable_binary_fetching as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['disableBinaryFetching'] = $disable_binary_fetching;
            }
        }
        // query params
        if ($disable_custom_object_deserialization !== null) {
            if('form' === 'form' && is_array($disable_custom_object_deserialization)) {
                foreach($disable_custom_object_deserialization as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['disableCustomObjectDeserialization'] = $disable_custom_object_deserialization;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDecisionInstancesCount
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function getHistoricDecisionInstancesCount($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        list($response) = $this->getHistoricDecisionInstancesCountWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key);
        return $response;
    }

    /**
     * Operation getHistoricDecisionInstancesCountWithHttpInfo
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CountResultDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDecisionInstancesCountWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        $request = $this->getHistoricDecisionInstancesCountRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CountResultDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CountResultDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDecisionInstancesCountAsync
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesCountAsync($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        return $this->getHistoricDecisionInstancesCountAsyncWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDecisionInstancesCountAsyncWithHttpInfo
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesCountAsyncWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        $returnType = '\OpenAPI\Client\Model\CountResultDto';
        $request = $this->getHistoricDecisionInstancesCountRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDecisionInstancesCount'
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/latest/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#39;T&#39;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHistoricDecisionInstancesCountRequest($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {

        $resourcePath = '/history/decision-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($decision_instance_id !== null) {
            if('form' === 'form' && is_array($decision_instance_id)) {
                foreach($decision_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionInstanceId'] = $decision_instance_id;
            }
        }
        // query params
        if ($decision_instance_id_in !== null) {
            if('form' === 'form' && is_array($decision_instance_id_in)) {
                foreach($decision_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionInstanceIdIn'] = $decision_instance_id_in;
            }
        }
        // query params
        if ($decision_definition_id !== null) {
            if('form' === 'form' && is_array($decision_definition_id)) {
                foreach($decision_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionId'] = $decision_definition_id;
            }
        }
        // query params
        if ($decision_definition_id_in !== null) {
            if('form' === 'form' && is_array($decision_definition_id_in)) {
                foreach($decision_definition_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionIdIn'] = $decision_definition_id_in;
            }
        }
        // query params
        if ($decision_definition_key !== null) {
            if('form' === 'form' && is_array($decision_definition_key)) {
                foreach($decision_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionKey'] = $decision_definition_key;
            }
        }
        // query params
        if ($decision_definition_key_in !== null) {
            if('form' === 'form' && is_array($decision_definition_key_in)) {
                foreach($decision_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionKeyIn'] = $decision_definition_key_in;
            }
        }
        // query params
        if ($decision_definition_name !== null) {
            if('form' === 'form' && is_array($decision_definition_name)) {
                foreach($decision_definition_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionName'] = $decision_definition_name;
            }
        }
        // query params
        if ($decision_definition_name_like !== null) {
            if('form' === 'form' && is_array($decision_definition_name_like)) {
                foreach($decision_definition_name_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionDefinitionNameLike'] = $decision_definition_name_like;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($case_definition_id !== null) {
            if('form' === 'form' && is_array($case_definition_id)) {
                foreach($case_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseDefinitionId'] = $case_definition_id;
            }
        }
        // query params
        if ($case_definition_key !== null) {
            if('form' === 'form' && is_array($case_definition_key)) {
                foreach($case_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseDefinitionKey'] = $case_definition_key;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($activity_id_in !== null) {
            if('form' === 'form' && is_array($activity_id_in)) {
                foreach($activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityIdIn'] = $activity_id_in;
            }
        }
        // query params
        if ($activity_instance_id_in !== null) {
            if('form' === 'form' && is_array($activity_instance_id_in)) {
                foreach($activity_instance_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityInstanceIdIn'] = $activity_instance_id_in;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($evaluated_before !== null) {
            if('form' === 'form' && is_array($evaluated_before)) {
                foreach($evaluated_before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluatedBefore'] = $evaluated_before;
            }
        }
        // query params
        if ($evaluated_after !== null) {
            if('form' === 'form' && is_array($evaluated_after)) {
                foreach($evaluated_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['evaluatedAfter'] = $evaluated_after;
            }
        }
        // query params
        if ($user_id !== null) {
            if('form' === 'form' && is_array($user_id)) {
                foreach($user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['userId'] = $user_id;
            }
        }
        // query params
        if ($root_decision_instance_id !== null) {
            if('form' === 'form' && is_array($root_decision_instance_id)) {
                foreach($root_decision_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootDecisionInstanceId'] = $root_decision_instance_id;
            }
        }
        // query params
        if ($root_decision_instances_only !== null) {
            if('form' === 'form' && is_array($root_decision_instances_only)) {
                foreach($root_decision_instances_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootDecisionInstancesOnly'] = $root_decision_instances_only;
            }
        }
        // query params
        if ($decision_requirements_definition_id !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_id)) {
                foreach($decision_requirements_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionId'] = $decision_requirements_definition_id;
            }
        }
        // query params
        if ($decision_requirements_definition_key !== null) {
            if('form' === 'form' && is_array($decision_requirements_definition_key)) {
                foreach($decision_requirements_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['decisionRequirementsDefinitionKey'] = $decision_requirements_definition_key;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstance
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $set_removal_time_to_historic_decision_instances_dto set_removal_time_to_historic_decision_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto
     */
    public function setRemovalTimeAsyncHistoricDecisionInstance($set_removal_time_to_historic_decision_instances_dto = null)
    {
        list($response) = $this->setRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo($set_removal_time_to_historic_decision_instances_dto);
        return $response;
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $set_removal_time_to_historic_decision_instances_dto (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BatchDto|\OpenAPI\Client\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo($set_removal_time_to_historic_decision_instances_dto = null)
    {
        $request = $this->setRemovalTimeAsyncHistoricDecisionInstanceRequest($set_removal_time_to_historic_decision_instances_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BatchDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BatchDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstanceAsync
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $set_removal_time_to_historic_decision_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncHistoricDecisionInstanceAsync($set_removal_time_to_historic_decision_instances_dto = null)
    {
        return $this->setRemovalTimeAsyncHistoricDecisionInstanceAsyncWithHttpInfo($set_removal_time_to_historic_decision_instances_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstanceAsyncWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $set_removal_time_to_historic_decision_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncHistoricDecisionInstanceAsyncWithHttpInfo($set_removal_time_to_historic_decision_instances_dto = null)
    {
        $returnType = '\OpenAPI\Client\Model\BatchDto';
        $request = $this->setRemovalTimeAsyncHistoricDecisionInstanceRequest($set_removal_time_to_historic_decision_instances_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setRemovalTimeAsyncHistoricDecisionInstance'
     *
     * @param  \OpenAPI\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $set_removal_time_to_historic_decision_instances_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setRemovalTimeAsyncHistoricDecisionInstanceRequest($set_removal_time_to_historic_decision_instances_dto = null)
    {

        $resourcePath = '/history/decision-instance/set-removal-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_removal_time_to_historic_decision_instances_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_removal_time_to_historic_decision_instances_dto));
            } else {
                $httpBody = $set_removal_time_to_historic_decision_instances_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
